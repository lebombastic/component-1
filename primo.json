{"site":{"id":"192117ab-0bc1-43ad-8aac-51a7c10feb5e","name":"compnents","url":"compnents","code":{"js":"","css":"\n@import url(\"https://unpkg.com/@primo-app/primo@1.3.64/reset.css\");\n\n#page {\n  font-family: system-ui, sans-serif;\n  color: var(--color);\n  line-height: 1.6; \n  font-size: 1rem;\n  background: gray;\n}\n\n.section-container {\n  max-width: var(--max-width, 1000px);\n  margin: 0 auto;\n  padding: 3rem var(--padding, 1rem); \n}\n\n.heading {\n  font-size: 3rem;\n  line-height: 1;\n  font-weight: 700;\n  margin: 0;\n}\n\n.button {\n  color: white;\n  background: var(--color-accent);\n  border-radius: 5px;\n  padding: 8px 20px;\n  transition: var(--transition);\n\n  &:hover {\n    box-shadow: 0 0 10px 5px rgba(0, 0, 0, 0.1);\n  } \n\n  &.inverted {\n    background: transparent; \n    color: var(--color-accent); \n    border: 2px solid var(--color-accent);\n  }\n}\n","html":{"head":"<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> ","below":""}},"fields":[],"content":{"en":{}}},"pages":[{"id":"ed76ca0b-462e-43e6-a9c4-d2444112cf7e","url":"index","name":"Home","code":{"js":"","css":"","html":{"head":"","below":""}},"fields":[],"content":{"en":{}},"site":"192117ab-0bc1-43ad-8aac-51a7c10feb5e","parent":null}],"sections":[{"id":"812adf41-377f-4b00-85e0-a3538f0f8cf2","content":{},"page":"ed76ca0b-462e-43e6-a9c4-d2444112cf7e","symbol":"8c3030e8-efd3-42cd-b148-b0468fa1c470","index":0}],"symbols":[{"id":"0f15a11a-665c-4d39-bd27-40677bf28bd1","name":"New Block","code":{"js":"// Import YouTube IFrame Player API\n  const tag = document.createElement('script');\n  tag.src = 'https://www.youtube.com/iframe_api';\n  document.head.appendChild(tag);\n\n  // Initialize variables\n  let apiKey = localStorage.getItem('apiKey') || '';\n  let searchQuery = '';\n  let videos = [];\n  let playlist = JSON.parse(localStorage.getItem('playlist')) || [\n    { title: 'Example Video 1', channel: 'Example Channel 1', id: 'VIDEO_ID_1', thumbnail: 'THUMBNAIL_URL_1', duration: 'DURATION_1' },\n    { title: 'Example Video 2', channel: 'Example Channel 2', id: 'VIDEO_ID_2', thumbnail: 'THUMBNAIL_URL_2', duration: 'DURATION_2' },\n    { title: 'Example Video 3', channel: 'Example Channel 3', id: 'VIDEO_ID_3', thumbnail: 'THUMBNAIL_URL_3', duration: 'DURATION_3' },\n  ];\n  let currentVideo = 0;\n  let player;\n\n  // YouTube API search function\n  async function searchVideos() {\n    if (!apiKey) {\n      alert('Please enter your YouTube API key');\n      return;\n    }\n    const response = await fetch(`https://www.googleapis.com/youtube/v3/search?part=snippet&q=${searchQuery}&maxResults=10&type=video&key=${apiKey}`);\n    const data = await response.json();\n    videos = data.items.map((item) => ({\n      title: item.snippet.title,\n      channel: item.snippet.channelTitle,\n      id: item.id.videoId,\n      thumbnail: item.snippet.thumbnails.default.url,\n      duration: 'Unknown', // YouTube API doesn't provide duration in search results\n    }));\n  }\n\n  // Save API key to Local Storage\n  function saveApiKey() {\n    localStorage.setItem('apiKey', apiKey);\n  }\n\n  // Add video to playlist\n  function addVideo(video) {\n    playlist = [...playlist, video];\n    localStorage.setItem('playlist', JSON.stringify(playlist));\n  }\n\n  // Remove video from playlist\n  function removeVideo(index) {\n    playlist = playlist.filter((_, i) => i !== index);\n    localStorage.setItem('playlist', JSON.stringify(playlist));\n  }\n\n  // Sort playlist\n  function sortPlaylist(by) {\n    playlist = playlist.sort((a, b) => a[by].localeCompare(b[by]));\n    localStorage.setItem('playlist', JSON.stringify(playlist));\n  }\n\n  // YouTube IFrame Player API callback\n  // YouTube IFrame Player API callback\n  let playerState = null;\n\n  // YouTube IFrame Player API callback\n  window.onYouTubeIframeAPIReady = () => {\n    player = new YT.Player('player', {\n      videoId: playlist[currentVideo].id,\n      playerVars: {\n        autoplay: 1,\n        controls: 0,\n      },\n      events: {\n        onStateChange: (event) => {\n          playerState = event.data;\n          if (event.data === YT.PlayerState.ENDED) {\n            currentVideo = (currentVideo + 1) % playlist.length;\n            player.loadVideoById(playlist[currentVideo].id);\n          }\n        },\n      },\n    });\n  };\n\n  // Playback controls\n  function playPause() {\n  if (player && player.getPlayerState && window.YT) {\n    if (player.getPlayerState() === window.YT.PlayerState.PLAYING) {\n      player.pauseVideo();\n    } else {\n      player.playVideo();\n    }\n  }\n}\n\n\n  function skipNext() {\n  if (player && player.loadVideoById) {\n    currentVideo = (currentVideo + 1) % playlist.length;\n    player.loadVideoById(playlist[currentVideo].id);\n  }\n}\n\nfunction skipPrevious() {\n  if (player && player.loadVideoById) {\n    currentVideo = (currentVideo - 1 + playlist.length) % playlist.length;\n    player.loadVideoById(playlist[currentVideo].id);\n  }\n}","css":"main {\n    max-width: 800px;\n    margin: 40px auto;\n    padding: 20px;\n    background-color: #333;\n    color: #fff;\n    border-radius: 10px;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);\n  }\n\n  h1 {\n    text-align: center;\n  }\n\n  input[type=\"text\"], input[type=\"search\"] {\n    width: 100%;\n    padding: 10px;\n    font-size: 18px;\n    border: none;\n    border-radius: 10px;\n  }\n\n  ul {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n  }\n\n  li {\n    padding: 10px;\n    border-bottom: 1px solid #444;\n  }\n\n  li img {\n    width: 50px;\n    height: 50px;\n    margin-right: 10px;\n  }\n\n  #player {\n    width: 100%;\n    height: 300px;\n    margin: 20px 0;\n  }\n\n  button {\n    padding: 10px 20px;\n    border: none;\n    border-radius: 10px;\n    background-color: #444;\n    color: #fff;\n    cursor: pointer;\n  }\n\n  button:hover {\n    background-color: #555;\n  }\n.player-area {\n    position: fixed;\n    bottom: 0;\n    left: 0;\n    width: 100%;\n    background-color: rgba(33, 33, 33, 0.9);\n    padding: 10px;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    border-top: 1px solid #444;\n    backdrop-filter: blur(10px);\n  }\n\n  .player-controls {\n    display: flex;\n    align-items: center;\n  }\n\n  .player-controls button {\n    background-color: transparent;\n    border: none;\n    padding: 10px;\n    cursor: pointer;\n    font-size: 18px;\n    color: #fff;\n  }\n\n  .player-controls button:hover {\n    background-color: #444;\n    border-radius: 50%;\n  }\n\n  .song-info {\n    font-size: 14px;\n    color: #fff;\n    margin-left: 10px;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    max-width: 200px;\n  }","html":"<main>\n  <h1>YouTube Music Player</h1>\n  <input type=\"text\" bind:value={apiKey} placeholder=\"Enter your YouTube API key\">\n  <button on:click={saveApiKey}>Save API Key</button>\n  <input type=\"search\" bind:value={searchQuery} on:input={searchVideos} placeholder=\"Search YouTube videos...\">\n  <ul>\n    {#each videos as video}\n      <li>\n        <img src={video.thumbnail} alt={video.title}>\n        <span>{video.title} by {video.channel}</span>\n        <button on:click={() => addVideo(video)}>Add to Playlist</button>\n      </li>\n    {/each}\n  </ul>\n  <ul>\n    {#each playlist as video, index}\n      <li>\n        <img src={video.thumbnail} alt={video.title}>\n        <span>{video.title} by {video.channel}</span>\n        <button on:click={() => removeVideo(index)}>Remove</button>\n      </li>\n    {/each}\n  </ul>\n  <div id=\"player\"></div>\n  <div>\n    <button on:click={skipPrevious}>Previous</button>\n    <button on:click={playPause}>Play/Pause</button>\n    <button on:click={skipNext}>Next</button>\n    <button on:click={() => sortPlaylist('title')}>Sort by Title</button>\n    <button on:click={() => sortPlaylist('channel')}>Sort by Channel</button>\n  </div>\n  <div class=\"player-area\">\n  {#if playerState !== null && window.YT}\n    <div class=\"player-controls\">\n      <button on:click={skipPrevious}>‹</button>\n      <button on:click={playPause}>{playerState === window.YT.PlayerState.PLAYING ? '❚❚' : '▶'}</button>\n      <button on:click={skipNext}>›</button>\n    </div>\n    <span class=\"song-info\">{playlist[currentVideo].title}</span>\n  {/if}\n</div>\n</main>\n<div id=\"player\"></div>"},"fields":[],"content":{"en":{}},"site":"192117ab-0bc1-43ad-8aac-51a7c10feb5e"},{"id":"8c3030e8-efd3-42cd-b148-b0468fa1c470","name":"note organizer","code":{"js":"// State variables\n        let notes = [];\n        let searchQuery = '';\n        let selectedTag = '';\n        let sortBy = 'dateModified';\n        let showModal = false;\n        let editingNote = null;\n        let formData = {\n            title: '',\n            text: '',\n            tagsString: ''\n        };\n\n        // Initialize app\n        function init() {\n            loadNotes();\n            if (notes.length === 0) {\n                createExampleNotes();\n            }\n        }\n\n        // Create example notes on first load\n        function createExampleNotes() {\n            const exampleNotes = [\n                {\n                    id: generateId(),\n                    title: 'Welcome to Note Organizer',\n                    text: 'This is your first note! You can create, edit, and organize notes with tags. Use the search bar to find notes quickly and filter by tags.',\n                    tags: ['welcome', 'tutorial'],\n                    dateCreated: new Date().toISOString(),\n                    dateModified: new Date().toISOString()\n                },\n                {\n                    id: generateId(),\n                    title: 'Project Ideas',\n                    text: 'List of project ideas:\\n- Build a personal website\\n- Learn a new programming language\\n- Create a mobile app\\n- Write a blog about coding',\n                    tags: ['work', 'ideas', 'projects'],\n                    dateCreated: new Date(Date.now() - 86400000).toISOString(), // Yesterday\n                    dateModified: new Date(Date.now() - 86400000).toISOString()\n                },\n                {\n                    id: generateId(),\n                    title: 'Shopping List',\n                    text: 'Weekly groceries:\\n- Milk\\n- Bread\\n- Eggs\\n- Fruits\\n- Vegetables\\n- Coffee',\n                    tags: ['personal', 'shopping'],\n                    dateCreated: new Date(Date.now() - 172800000).toISOString(), // 2 days ago\n                    dateModified: new Date(Date.now() - 172800000).toISOString()\n                }\n            ];\n            \n            notes = exampleNotes;\n            saveNotes();\n        }\n\n        // Local storage functions\n        function loadNotes() {\n            const stored = localStorage.getItem('notes');\n            if (stored) {\n                notes = JSON.parse(stored);\n            }\n        }\n\n        function saveNotes() {\n            localStorage.setItem('notes', JSON.stringify(notes));\n        }\n\n        // Utility functions\n        function generateId() {\n            return Date.now().toString(36) + Math.random().toString(36).substr(2);\n        }\n\n        function formatDate(dateString) {\n            const date = new Date(dateString);\n            return date.toLocaleDateString('en-US', { \n                month: 'short', \n                day: 'numeric',\n                hour: '2-digit',\n                minute: '2-digit'\n            });\n        }\n\n        function parseTags(tagsString) {\n            return tagsString\n                .split(',')\n                .map(tag => tag.trim())\n                .filter(tag => tag.length > 0);\n        }\n\n        // Computed properties\n        $: allTags = [...new Set(notes.flatMap(note => note.tags))].sort();\n        \n        $: filteredNotes = notes\n            .filter(note => {\n                const matchesSearch = !searchQuery || \n                    note.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                    note.text.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                    note.tags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()));\n                \n                const matchesTag = !selectedTag || note.tags.includes(selectedTag);\n                \n                return matchesSearch && matchesTag;\n            })\n            .sort((a, b) => {\n                const dateA = new Date(a[sortBy]);\n                const dateB = new Date(b[sortBy]);\n                return dateB - dateA; // Most recent first\n            });\n\n        // Event handlers\n        function handleSearch(event) {\n            searchQuery = event.target.value;\n        }\n\n        function setSortBy(newSortBy) {\n            sortBy = newSortBy;\n        }\n\n        function setSelectedTag(tag) {\n            selectedTag = tag;\n        }\n\n        function openAddModal() {\n            editingNote = null;\n            formData = {\n                title: '',\n                text: '',\n                tagsString: ''\n            };\n            showModal = true;\n        }\n\n        function editNote(note) {\n            editingNote = note;\n            formData = {\n                title: note.title,\n                text: note.text,\n                tagsString: note.tags.join(', ')\n            };\n            showModal = true;\n        }\n\n        function closeModal() {\n            showModal = false;\n            editingNote = null;\n        }\n\n        function saveNote() {\n            if (!formData.title.trim()) {\n                alert('Please enter a title');\n                return;\n            }\n\n            const tags = parseTags(formData.tagsString);\n            const now = new Date().toISOString();\n\n            if (editingNote) {\n                // Update existing note\n                const index = notes.findIndex(n => n.id === editingNote.id);\n                notes[index] = {\n                    ...editingNote,\n                    title: formData.title.trim(),\n                    text: formData.text.trim(),\n                    tags: tags,\n                    dateModified: now\n                };\n            } else {\n                // Create new note\n                const newNote = {\n                    id: generateId(),\n                    title: formData.title.trim(),\n                    text: formData.text.trim(),\n                    tags: tags,\n                    dateCreated: now,\n                    dateModified: now\n                };\n                notes = [newNote, ...notes];\n            }\n\n            saveNotes();\n            closeModal();\n        }\n\n        function deleteNote() {\n            if (confirm('Are you sure you want to delete this note?')) {\n                notes = notes.filter(n => n.id !== editingNote.id);\n                saveNotes();\n                closeModal();\n            }\n        }\n\n        // Initialize the app\n        init();","css":"* {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }\n\n        body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n            background: white;\n            color: #333;\n            line-height: 1.6;\n        }\n\n        .container {\n            max-width: 1200px;\n            margin: 0 auto;\n            padding: 20px;\n            min-height: 100vh;\n            position: relative;\n        }\n\n        .header {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            margin-bottom: 30px;\n            flex-wrap: wrap;\n            gap: 15px;\n        }\n\n        .title {\n            font-size: 2rem;\n            font-weight: 700;\n            color: #333;\n        }\n\n        .search-container {\n            display: flex;\n            align-items: center;\n            position: relative;\n        }\n\n        .search-input {\n            padding: 12px 45px 12px 15px;\n            border: 2px solid #e0e0e0;\n            border-radius: 25px;\n            font-size: 16px;\n            width: 300px;\n            outline: none;\n            transition: border-color 0.3s;\n        }\n\n        .search-input:focus {\n            border-color: #333;\n        }\n\n        .search-icon {\n            position: absolute;\n            right: 15px;\n            width: 20px;\n            height: 20px;\n            color: #666;\n        }\n\n        .filters {\n            margin-bottom: 30px;\n        }\n\n        .sort-controls {\n            display: flex;\n            gap: 10px;\n            margin-bottom: 20px;\n            flex-wrap: wrap;\n        }\n\n        .sort-btn {\n            padding: 8px 16px;\n            border: 1px solid #ddd;\n            background: white;\n            color: #333;\n            border-radius: 20px;\n            cursor: pointer;\n            font-size: 14px;\n            transition: all 0.3s;\n        }\n\n        .sort-btn.active {\n            background: #333;\n            color: white;\n            border-color: #333;\n        }\n\n        .tags-filter {\n            display: flex;\n            gap: 10px;\n            overflow-x: auto;\n            padding: 10px 0;\n            scrollbar-width: none;\n            -ms-overflow-style: none;\n        }\n\n        .tags-filter::-webkit-scrollbar {\n            display: none;\n        }\n\n        .tag-filter {\n            padding: 8px 16px;\n            background: #f5f5f5;\n            border: none;\n            color: #333;\n            border-radius: 20px;\n            cursor: pointer;\n            white-space: nowrap;\n            font-size: 14px;\n            transition: all 0.3s;\n        }\n\n        .tag-filter.active {\n            background: #333;\n            color: white;\n        }\n\n        .notes-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n            gap: 20px;\n            margin-bottom: 100px;\n        }\n\n        .note-card {\n            background: white;\n            border: 1px solid #e0e0e0;\n            border-radius: 12px;\n            padding: 20px;\n            box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n            transition: transform 0.2s, box-shadow 0.2s;\n            cursor: pointer;\n        }\n\n        .note-card:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 4px 16px rgba(0,0,0,0.15);\n        }\n\n        .note-title {\n            font-size: 1.2rem;\n            font-weight: 600;\n            margin-bottom: 10px;\n            color: #333;\n        }\n\n        .note-text {\n            color: #666;\n            margin-bottom: 15px;\n            line-height: 1.5;\n            overflow: hidden;\n            display: -webkit-box;\n            -webkit-line-clamp: 4;\n            -webkit-box-orient: vertical;\n        }\n\n        .note-tags {\n            display: flex;\n            flex-wrap: wrap;\n            gap: 6px;\n            margin-bottom: 15px;\n        }\n\n        .note-tag {\n            background: #f0f0f0;\n            padding: 4px 8px;\n            border-radius: 12px;\n            font-size: 12px;\n            color: #666;\n        }\n\n        .note-meta {\n            font-size: 12px;\n            color: #999;\n            display: flex;\n            justify-content: space-between;\n        }\n\n        .add-btn {\n            position: fixed;\n            bottom: 30px;\n            right: 30px;\n            width: 60px;\n            height: 60px;\n            background: #333;\n            color: white;\n            border: none;\n            border-radius: 50%;\n            font-size: 24px;\n            cursor: pointer;\n            box-shadow: 0 4px 16px rgba(0,0,0,0.2);\n            transition: transform 0.2s;\n            z-index: 1000;\n        }\n\n        .add-btn:hover {\n            transform: scale(1.1);\n        }\n\n        .modal {\n            position: fixed;\n            top: 0;\n            left: 0;\n            right: 0;\n            bottom: 0;\n            background: rgba(0,0,0,0.5);\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            z-index: 2000;\n            padding: 20px;\n        }\n\n        .modal-content {\n            background: white;\n            border-radius: 12px;\n            padding: 30px;\n            width: 100%;\n            max-width: 500px;\n            max-height: 80vh;\n            overflow-y: auto;\n        }\n\n        .modal-header {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            margin-bottom: 20px;\n        }\n\n        .modal-title {\n            font-size: 1.5rem;\n            font-weight: 600;\n        }\n\n        .close-btn {\n            background: none;\n            border: none;\n            font-size: 24px;\n            cursor: pointer;\n            color: #666;\n        }\n\n        .form-group {\n            margin-bottom: 20px;\n        }\n\n        .form-label {\n            display: block;\n            margin-bottom: 8px;\n            font-weight: 500;\n            color: #333;\n        }\n\n        .form-input {\n            width: 100%;\n            padding: 12px;\n            border: 2px solid #e0e0e0;\n            border-radius: 8px;\n            font-size: 16px;\n            outline: none;\n            color: #333;\n            transition: border-color 0.3s;\n        }\n\n        .form-input:focus {\n            border-color: #333;\n        }\n\n        .form-textarea {\n            width: 100%;\n            padding: 12px;\n            color: #333;\n            border: 2px solid #e0e0e0;\n            border-radius: 8px;\n            font-size: 16px;\n            outline: none;\n            min-height: 120px;\n            resize: vertical;\n            font-family: inherit;\n            transition: border-color 0.3s;\n        }\n\n        .form-textarea:focus {\n            border-color: #333;\n        }\n\n        .modal-actions {\n            display: flex;\n            gap: 10px;\n            justify-content: flex-end;\n            margin-top: 20px;\n        }\n\n        .btn {\n            padding: 12px 24px;\n            border: none;\n            border-radius: 8px;\n            cursor: pointer;\n            font-size: 16px;\n            transition: background-color 0.3s;\n        }\n\n        .btn-primary {\n            background: #333;\n            color: white;\n        }\n\n        .btn-primary:hover {\n            background: #555;\n        }\n\n        .btn-secondary {\n            background: #f5f5f5;\n            color: #333;\n        }\n\n        .btn-secondary:hover {\n            background: #e0e0e0;\n        }\n\n        .btn-danger {\n            background: #dc3545;\n            color: white;\n        }\n\n        .btn-danger:hover {\n            background: #c82333;\n        }\n\n        .empty-state {\n            text-align: center;\n            padding: 60px 20px;\n            color: #666;\n        }\n\n        .empty-state-icon {\n            font-size: 4rem;\n            margin-bottom: 20px;\n            opacity: 0.3;\n        }\n\n        @media (max-width: 768px) {\n            .header {\n                flex-direction: column;\n                align-items: flex-start;\n            }\n\n            .search-input {\n                width: 100%;\n                max-width: 300px;\n            }\n\n            .search-icon {\n                display: block;\n            }\n\n            .notes-grid {\n                grid-template-columns: 1fr;\n            }\n\n            .sort-controls {\n                justify-content: center;\n            }\n        }","html":"<div class=\"container\">\n        <div class=\"header\">\n            <h1 class=\"title\">Note Organizer</h1>\n            <div class=\"search-container\">\n                <input \n                    type=\"text\" \n                    class=\"search-input\" \n                    placeholder=\"Search notes...\"\n                    bind:value={searchQuery}\n                    on:input={handleSearch}\n                    on:keydown={(e) => { if (e.key === 'Enter') handleSearch(e); }}\n                />\n                <svg class=\"search-icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"></path>\n                </svg>\n            </div>\n        </div>\n        <div class=\"filters\">\n            <div class=\"sort-controls\">\n                <button \n                    class=\"sort-btn {sortBy === 'dateCreated' ? 'active' : ''}\"\n                    on:click={() => setSortBy('dateCreated')}\n                    on:keydown={(e) => { if (e.key === 'Enter' || e.key === ' ') setSortBy('dateCreated'); }}\n                >\n                    Date Created\n                </button>\n                <button \n                    class=\"sort-btn {sortBy === 'dateModified' ? 'active' : ''}\"\n                    on:click={() => setSortBy('dateModified')}\n                    on:keydown={(e) => { if (e.key === 'Enter' || e.key === ' ') setSortBy('dateModified'); }}\n                >\n                    Date Modified\n                </button>\n            </div>\n            <div class=\"tags-filter\">\n                <button \n                    class=\"tag-filter {selectedTag === '' ? 'active' : ''}\"\n                    on:click={() => setSelectedTag('')}\n                    on:keydown={(e) => { if (e.key === 'Enter' || e.key === ' ') setSelectedTag(''); }}\n                >\n                    All\n                </button>\n                {#each allTags as tag}\n                    <button \n                        class=\"tag-filter {selectedTag === tag ? 'active' : ''}\"\n                        on:click={() => setSelectedTag(tag)}\n                        on:keydown={(e) => { if (e.key === 'Enter' || e.key === ' ') setSelectedTag(tag); }}\n                    >\n                        {tag}\n                    </button>\n                {/each}\n            </div>\n        </div>\n        {#if filteredNotes.length === 0}\n            <div class=\"empty-state\">\n                <div class=\"empty-state-icon\">📝</div>\n                <h3>No notes found</h3>\n                <p>Create your first note by clicking the + button</p>\n            </div>\n        {:else}\n            <div class=\"notes-grid\">\n                {#each filteredNotes as note}\n                  <!-- svelte-ignore a11y-no-noninteractive-tabindex -->\n                    <div class=\"note-card\" on:click={() => editNote(note)} on:keydown={(e) => { if (e.key === 'Enter' || e.key === ' ') editNote(note); }} tabindex=\"0\">\n                        <h3 class=\"note-title\">{note.title}</h3>\n                        <p class=\"note-text\">{note.text}</p>\n                        <div class=\"note-tags\">\n                            {#each note.tags as tag}\n                                <span class=\"note-tag\">{tag}</span>\n                            {/each}\n                        </div>\n                        <div class=\"note-meta\">\n                            <span>Created: {formatDate(note.dateCreated)}</span>\n                            <span>Modified: {formatDate(note.dateModified)}</span>\n                        </div>\n                    </div>\n                {/each}\n            </div>\n        {/if}\n        <button class=\"add-btn\" on:click={openAddModal} on:keydown={(e) => { if (e.key === 'Enter' || e.key === ' ') openAddModal(); }}>+</button>\n        {#if showModal}\n            <div class=\"modal\" on:click={closeModal} on:keydown={(e) => { if (e.key === 'Escape') closeModal(); }}>\n                <div class=\"modal-content\" on:click|stopPropagation on:keydown={(e) => { if (e.key === 'Escape') closeModal(); }} tabindex=\"-1\">\n                    <div class=\"modal-header\">\n                        <h2 class=\"modal-title\">{editingNote ? 'Edit Note' : 'Add Note'}</h2>\n                        <button class=\"close-btn\" on:click={closeModal} on:keydown={(e) => { if (e.key === 'Enter' || e.key === ' ') closeModal(); }}>×</button>\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"note-title\" class=\"form-label\">Title</label>\n                        <input \n                            type=\"text\" \n                            id=\"note-title\"\n                            class=\"form-input\" \n                            bind:value={formData.title}\n                            placeholder=\"Enter note title...\"\n                        />\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"note-tags\" class=\"form-label\">Tags (comma separated)</label>\n                        <input \n                            type=\"text\" \n                            id=\"note-tags\"\n                            class=\"form-input\" \n                            bind:value={formData.tagsString}\n                            placeholder=\"work, personal, ideas...\"\n                        />\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"note-text\" class=\"form-label\">Note</label>\n                        <textarea \n                            id=\"note-text\"\n                            class=\"form-textarea\" \n                            bind:value={formData.text}\n                            placeholder=\"Write your note here...\"\n                        ></textarea>\n                    </div>\n                    <div class=\"modal-actions\">\n                        {#if editingNote}\n                            <button class=\"btn btn-danger\" on:click={deleteNote} on:keydown={(e) => { if (e.key === 'Enter' || e.key === ' ') deleteNote(); }}>Delete</button>\n                        {/if}\n                        <button class=\"btn btn-secondary\" on:click={closeModal} on:keydown={(e) => { if (e.key === 'Enter' || e.key === ' ') closeModal(); }}>Cancel</button>\n                        <button class=\"btn btn-primary\" on:click={saveNote} on:keydown={(e) => { if (e.key === 'Enter' || e.key === ' ') saveNote(); }}>\n                            {editingNote ? 'Update' : 'Save'}\n                        </button>\n                    </div>\n                </div>\n            </div>\n        {/if}\n</div>"},"fields":[],"content":{"en":{}},"site":"192117ab-0bc1-43ad-8aac-51a7c10feb5e"},{"id":"fb00dea9-6923-4409-9a0b-2056914b0752","name":"New Block","code":{"js":"import { onMount } from 'svelte';\n\n// Initialize all variables with proper defaults\nlet currentStep = 'upload';\nlet resumeFile = null;\nlet resumeText = '';\nlet apiKey = '';\nlet jobDescription = '';\nlet evaluation = null;\nlet improvedResume = '';\nlet loading = false;\nlet error = '';\nlet fileInput;\n\n// Client-side PDF text extraction using PDF.js\nasync function extractTextFromPDF(file) {\n  try {\n    const arrayBuffer = await file.arrayBuffer();\n    \n    // Load PDF.js from CDN if not already loaded\n    if (!window.pdfjsLib) {\n      await new Promise((resolve, reject) => {\n        const script = document.createElement('script');\n        script.src = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js';\n        script.onload = resolve;\n        script.onerror = reject;\n        document.head.appendChild(script);\n      });\n    }\n    \n    // Set worker source\n    if (!window.pdfjsLib.GlobalWorkerOptions.workerSrc) {\n      window.pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';\n    }\n    \n    const pdf = await window.pdfjsLib.getDocument(arrayBuffer).promise;\n    let fullText = '';\n    \n    // Extract text from all pages\n    for (let i = 1; i <= pdf.numPages; i++) {\n      const page = await pdf.getPage(i);\n      const textContent = await page.getTextContent();\n      const pageText = textContent.items.map(item => item.str).join(' ');\n      fullText += pageText + '\\n';\n    }\n    \n    return fullText.trim();\n  } catch (error) {\n    console.error('PDF extraction error:', error);\n    throw new Error('Failed to extract text from PDF. Please ensure the file is not corrupted and contains readable text.');\n  }\n}\n\nasync function handleFileUpload(event) {\n  const file = event.target.files[0];\n  if (file && file.type === 'application/pdf') {\n    resumeFile = file;\n    loading = true;\n    error = '';\n    \n    try {\n      const text = await extractTextFromPDF(file);\n      if (!text || text.trim().length < 50) {\n        throw new Error('Unable to extract sufficient text from PDF. Please ensure the PDF contains readable text.');\n      }\n      resumeText = text;\n      currentStep = 'api-key';\n    } catch (err) {\n      error = err.message;\n    }\n    loading = false;\n  } else {\n    error = 'Please upload a PDF file';\n  }\n}\n\nasync function callGeminiAPI(prompt) {\n  if (!apiKey) {\n    throw new Error('API key is required');\n  }\n\n  const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      contents: [{\n        parts: [{\n          text: prompt\n        }]\n      }]\n    })\n  });\n\n  if (!response.ok) {\n    const errorData = await response.json().catch(() => ({}));\n    throw new Error(`API call failed: ${response.status} ${response.statusText}. ${errorData.error?.message || ''}`);\n  }\n\n  const data = await response.json();\n  if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {\n    throw new Error('Invalid response from API');\n  }\n  \n  return data.candidates[0].content.parts[0].text;\n}\n\nasync function evaluateResume() {\n  if (!apiKey) {\n    error = 'Please enter your Google Gemini API key';\n    return;\n  }\n\n  if (!resumeText || resumeText.trim().length < 50) {\n    error = 'No sufficient resume content found. Please upload a valid PDF with readable text.';\n    return;\n  }\n\n  loading = true;\n  error = '';\n\n  try {\n    const evaluationPrompt = `\nPlease analyze the following resume and provide a detailed evaluation in JSON format with the following exact structure:\n{\n  \"overallScore\": (number between 0-10),\n  \"strengths\": [array of strings describing strengths],\n  \"weaknesses\": [array of strings describing areas for improvement],\n  \"suggestions\": [array of strings with specific recommendations],\n  \"atsScore\": (number between 0-10 for ATS compatibility),\n  \"readabilityScore\": (number between 0-10 for readability),\n  \"keywordMatch\": (number between 0-10 for keyword optimization)\n}\n\nResume content:\n${resumeText}\n\nFocus on:\n- ATS compatibility and formatting\n- Professional content quality and relevance\n- Skills presentation and organization\n- Achievement quantification\n- Overall structure and readability\n- Industry-specific keywords\n\nProvide only the JSON response without any additional text or formatting.\n`;\n\n    const response = await callGeminiAPI(evaluationPrompt);\n    \n    // Try to parse JSON response\n    let evaluationData;\n    try {\n      // Clean the response and extract JSON\n      const cleanedResponse = response.replace(/```json|```/g, '').trim();\n      const jsonMatch = cleanedResponse.match(/\\{[\\s\\S]*\\}/);\n      if (jsonMatch) {\n        evaluationData = JSON.parse(jsonMatch[0]);\n      } else {\n        throw new Error('No JSON found in response');\n      }\n      \n      // Validate required fields\n      if (!evaluationData.overallScore || !evaluationData.strengths || !evaluationData.weaknesses) {\n        throw new Error('Invalid evaluation format');\n      }\n      \n    } catch (parseError) {\n      console.error('JSON parsing error:', parseError);\n      // Create a basic evaluation if parsing fails\n      evaluationData = {\n        overallScore: 7.0,\n        strengths: ['Resume content successfully analyzed'],\n        weaknesses: ['Detailed analysis temporarily unavailable'],\n        suggestions: ['Please try the evaluation again'],\n        atsScore: 6.0,\n        readabilityScore: 7.0,\n        keywordMatch: 5.0\n      };\n    }\n\n    evaluation = evaluationData;\n    currentStep = 'evaluation';\n  } catch (err) {\n    error = `Failed to evaluate resume: ${err.message}`;\n  }\n  loading = false;\n}\n\nasync function improveResume() {\n  if (!jobDescription.trim()) {\n    error = 'Please enter the job description';\n    return;\n  }\n\n  if (!resumeText || resumeText.trim().length < 50) {\n    error = 'No resume content found';\n    return;\n  }\n\n  loading = true;\n  error = '';\n\n  try {\n    const improvementPrompt = `\nPlease improve the following resume based on the job description provided. \nCreate an enhanced, ATS-friendly version that:\n\n1. Uses ONLY the ACTUAL content from the original resume (do not create fake information)\n2. Optimizes keywords for the specific job requirements\n3. Improves formatting and structure for ATS compatibility\n4. Quantifies achievements where possible (only if data exists in original)\n5. Maintains professional, clean formatting\n6. Uses appropriate section headers (SUMMARY, EXPERIENCE, EDUCATION, SKILLS, etc.)\n7. Keeps all original factual information accurate and truthful\n8. Enhances existing content without adding fictional details\n\nOriginal Resume Content:\n${resumeText}\n\nTarget Job Description:\n${jobDescription}\n\nPlease provide the improved resume in a clean, professional format with proper sections and formatting. Focus on optimizing the existing content rather than adding new information. Use standard section headers and maintain ATS-friendly formatting.\n`;\n\n    const improvedContent = await callGeminiAPI(improvementPrompt);\n    \n    if (!improvedContent || improvedContent.trim().length < 100) {\n      throw new Error('Generated resume content is too short or invalid');\n    }\n    \n    improvedResume = improvedContent;\n    currentStep = 'improved';\n  } catch (err) {\n    error = `Failed to improve resume: ${err.message}`;\n  }\n  loading = false;\n}\n\n// function downloadResume() {\n//   try {\n//     const element = document.createElement('a');\n//     const file = new Blob([improvedResume], { type: 'text/plain' });\n//     element.href = URL.createObjectURL(file);\n//     element.download = `improved_resume_${new Date().toISOString().split('T')[0]}.txt`;\n//     document.body.appendChild(element);\n//     element.click();\n//     document.body.removeChild(element);\n//   } catch (err) {\n//     error = 'Failed to download resume';\n//   }\n// }\n\nfunction downloadResumeAsText() {\n  try {\n    const element = document.createElement('a');\n    const file = new Blob([improvedResume], { type: 'text/plain' });\n    element.href = URL.createObjectURL(file);\n    element.download = `improved_resume_${new Date().toISOString().split('T')[0]}.txt`;\n    document.body.appendChild(element);\n    element.click();\n    document.body.removeChild(element);\n  } catch (err) {\n    error = 'Failed to download resume as text';\n  }\n}\n\nfunction downloadResumeAsHTML() {\n  try {\n    // Convert the resume text to beautifully formatted HTML\n    const htmlContent = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Professional Resume</title>\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }\n        \n        body {\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            line-height: 1.6;\n            color: #333;\n            max-width: 8.5in;\n            margin: 0 auto;\n            padding: 0.5in;\n            background: white;\n        }\n        \n        .header {\n            text-align: center;\n            padding: 20px 0;\n            border-bottom: 3px solid #2563eb;\n            margin-bottom: 25px;\n            background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);\n            border-radius: 8px 8px 0 0;\n        }\n        \n        .name {\n            font-size: 28px;\n            font-weight: 700;\n            color: #1e40af;\n            margin-bottom: 8px;\n            letter-spacing: 1px;\n        }\n        \n        .contact-info {\n            font-size: 14px;\n            color: #64748b;\n            display: flex;\n            justify-content: center;\n            flex-wrap: wrap;\n            gap: 15px;\n        }\n        \n        .contact-item {\n            display: flex;\n            align-items: center;\n            gap: 5px;\n        }\n        \n        .section {\n            margin-bottom: 25px;\n            page-break-inside: avoid;\n        }\n        \n        .section-title {\n            font-size: 18px;\n            font-weight: 700;\n            color: #1e40af;\n            text-transform: uppercase;\n            letter-spacing: 1px;\n            padding: 8px 0;\n            border-bottom: 2px solid #3b82f6;\n            margin-bottom: 15px;\n            position: relative;\n        }\n        \n        .section-title::after {\n            content: '';\n            position: absolute;\n            bottom: -2px;\n            left: 0;\n            width: 50px;\n            height: 2px;\n            background: #10b981;\n        }\n        \n        .content {\n            font-size: 14px;\n            line-height: 1.7;\n        }\n        \n        .job-title {\n            font-weight: 600;\n            color: #1e40af;\n            font-size: 16px;\n            margin-bottom: 5px;\n        }\n        \n        .company {\n            font-weight: 500;\n            color: #059669;\n            margin-bottom: 3px;\n        }\n        \n        .date {\n            color: #6b7280;\n            font-style: italic;\n            margin-bottom: 10px;\n        }\n        \n        .achievement {\n            margin: 8px 0;\n            padding-left: 15px;\n            position: relative;\n        }\n        \n        .achievement::before {\n            content: '▸';\n            position: absolute;\n            left: 0;\n            color: #3b82f6;\n            font-weight: bold;\n        }\n        \n        .skills-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n            gap: 20px;\n            margin-top: 15px;\n        }\n        \n        .skill-category {\n            background: #f8fafc;\n            padding: 15px;\n            border-radius: 8px;\n            border-left: 4px solid #3b82f6;\n        }\n        \n        .skill-category h4 {\n            color: #1e40af;\n            font-weight: 600;\n            margin-bottom: 8px;\n        }\n        \n        .skill-tags {\n            display: flex;\n            flex-wrap: wrap;\n            gap: 6px;\n        }\n        \n        .skill-tag {\n            background: #dbeafe;\n            color: #1e40af;\n            padding: 4px 8px;\n            border-radius: 12px;\n            font-size: 12px;\n            font-weight: 500;\n        }\n        \n        .education-item {\n            margin-bottom: 15px;\n            padding: 15px;\n            background: #f8fafc;\n            border-radius: 8px;\n            border-left: 4px solid #10b981;\n        }\n        \n        .degree {\n            font-weight: 600;\n            color: #1e40af;\n            font-size: 15px;\n        }\n        \n        .school {\n            color: #059669;\n            font-weight: 500;\n        }\n        \n        .summary-text {\n            background: #f0f9ff;\n            padding: 20px;\n            border-radius: 8px;\n            border-left: 4px solid #0ea5e9;\n            font-size: 15px;\n            line-height: 1.8;\n            color: #0f172a;\n        }\n        \n        /* Print styles */\n        @media print {\n            body {\n                margin: 0;\n                padding: 0.3in;\n                font-size: 12px;\n            }\n            .header {\n                background: white !important;\n                -webkit-print-color-adjust: exact;\n            }\n            .section-title {\n                color: #000 !important;\n                border-bottom: 1px solid #000 !important;\n            }\n            .skill-category, .education-item, .summary-text {\n                background: white !important;\n                border: 1px solid #ccc !important;\n            }\n        }\n        \n        /* ATS-friendly styles */\n        .ats-friendly {\n            font-family: Arial, sans-serif;\n            font-size: 11pt;\n            line-height: 1.5;\n        }\n    </style>\n</head>\n<body class=\"ats-friendly\">\n    <div class=\"resume-container\">\n        ${formatResumeContent(improvedResume)}\n    </div>\n</body>\n</html>`;\n\n    const element = document.createElement('a');\n    const file = new Blob([htmlContent], { type: 'text/html' });\n    element.href = URL.createObjectURL(file);\n    element.download = `professional_resume_${new Date().toISOString().split('T')[0]}.html`;\n    document.body.appendChild(element);\n    element.click();\n    document.body.removeChild(element);\n  } catch (err) {\n    error = 'Failed to download resume as HTML';\n  }\n}\n\n\nasync function copyToClipboard() {\n  try {\n    await navigator.clipboard.writeText(improvedResume);\n    // Show temporary success message\n    const originalError = error;\n    error = '';\n    // You could add a toast notification here instead\n    setTimeout(() => {\n      error = originalError;\n    }, 2000);\n  } catch (err) {\n    error = 'Failed to copy to clipboard';\n  }\n}\n\nfunction resetApp() {\n  currentStep = 'upload';\n  resumeFile = null;\n  resumeText = '';\n  jobDescription = '';\n  evaluation = null;\n  improvedResume = '';\n  error = '';\n  apiKey = '';\n}\n\n// ScoreCircle Component Logic (updated for 0-10 scale)\nfunction ScoreCircle(node, { score, label }) {\n  const strokeColor = score >= 8 ? \"#10b981\" : score >= 6 ? \"#f59e0b\" : \"#ef4444\";\n  const strokeDasharray = `${score * 25.1} 251`;\n  \n  node.innerHTML = `\n    <div class=\"flex flex-col items-center\">\n      <div class=\"relative w-12 h-12\">\n        <svg class=\"w-12 h-12 transform -rotate-90\" viewBox=\"0 0 100 100\">\n          <circle\n            cx=\"50\"\n            cy=\"50\"\n            r=\"40\"\n            stroke=\"#e5e7eb\"\n            stroke-width=\"8\"\n            fill=\"none\"\n          />\n          <circle\n            cx=\"50\"\n            cy=\"50\"\n            r=\"40\"\n            stroke=\"${strokeColor}\"\n            stroke-width=\"8\"\n            fill=\"none\"\n            stroke-dasharray=\"${strokeDasharray}\"\n            stroke-linecap=\"round\"\n          />\n        </svg>\n        <div class=\"absolute inset-0 flex items-center justify-center\">\n          <span class=\"text-xs font-bold\">${score}/10</span>\n        </div>\n      </div>\n      <span class=\"text-xs text-gray-600 mt-1 text-center\">${label}</span>\n    </div>\n  `;\n  \n  return {\n    update({ score: newScore, label: newLabel }) {\n      const newStrokeColor = newScore >= 8 ? \"#10b981\" : newScore >= 6 ? \"#f59e0b\" : \"#ef4444\";\n      const newStrokeDasharray = `${newScore * 25.1} 251`;\n      \n      const circle = node.querySelector('circle:last-child');\n      const span = node.querySelector('span');\n      const labelSpan = node.querySelector('.text-xs');\n      \n      if (circle) {\n        circle.setAttribute('stroke', newStrokeColor);\n        circle.setAttribute('stroke-dasharray', newStrokeDasharray);\n      }\n      if (span) {\n        span.textContent = `${newScore}/10`;\n      }\n      if (labelSpan) {\n        labelSpan.textContent = newLabel;\n      }\n    }\n  };\n}\nfunction formatResumeContent(resumeText) {\n  // Parse the resume text and convert to structured HTML\n  const lines = resumeText.split('\\n');\n  let html = '';\n  let currentSection = '';\n  let inHeader = true;\n  \n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i].trim();\n    \n    if (!line) continue;\n    \n    // Detect header information\n    if (inHeader && (line.includes('@') || line.includes('phone') || line.includes('linkedin'))) {\n      if (!html.includes('<div class=\"header\">')) {\n        html += '<div class=\"header\">';\n        // Extract name (usually first non-empty line)\n        const nameMatch = resumeText.match(/^([A-Z][a-z]+ [A-Z][a-z]+)/m);\n        if (nameMatch) {\n          html += `<div class=\"name\">${nameMatch[1]}</div>`;\n        }\n        html += '<div class=\"contact-info\">';\n      }\n      \n      // Format contact information\n      if (line.includes('@')) {\n        html += `<div class=\"contact-item\">📧 ${line}</div>`;\n      } else if (line.includes('phone') || line.match(/\\(\\d{3}\\)/)) {\n        html += `<div class=\"contact-item\">📞 ${line}</div>`;\n      } else if (line.includes('linkedin')) {\n        html += `<div class=\"contact-item\">🔗 ${line}</div>`;\n      } else {\n        html += `<div class=\"contact-item\">📍 ${line}</div>`;\n      }\n      continue;\n    }\n    \n    // Close header if we've moved past contact info\n    if (inHeader && (line.toUpperCase().includes('SUMMARY') || line.toUpperCase().includes('EXPERIENCE'))) {\n      html += '</div></div>';\n      inHeader = false;\n    }\n    \n    // Detect section headers\n    if (line.toUpperCase() === line && line.length > 3 && \n        (line.includes('SUMMARY') || line.includes('EXPERIENCE') || line.includes('EDUCATION') || \n         line.includes('SKILLS') || line.includes('PROJECTS'))) {\n      if (currentSection) html += '</div>';\n      currentSection = line;\n      html += `<div class=\"section\"><div class=\"section-title\">${line}</div><div class=\"content\">`;\n      continue;\n    }\n    \n    // Format content based on section\n    if (currentSection.includes('SUMMARY')) {\n      html += `<div class=\"summary-text\">${line}</div>`;\n    } else if (currentSection.includes('EXPERIENCE')) {\n      if (line.match(/^\\w+.*\\d{4}/)) {\n        html += `<div class=\"job-title\">${line}</div>`;\n      } else if (line.includes('•') || line.startsWith('-')) {\n        html += `<div class=\"achievement\">${line.replace(/^[•-]\\s*/, '')}</div>`;\n      } else {\n        html += `<div class=\"company\">${line}</div>`;\n      }\n    } else if (currentSection.includes('EDUCATION')) {\n      html += `<div class=\"education-item\"><div class=\"degree\">${line}</div></div>`;\n    } else if (currentSection.includes('SKILLS')) {\n      if (line.includes(':')) {\n        const [category, skills] = line.split(':');\n        html += `<div class=\"skill-category\">\n          <h4>${category.trim()}</h4>\n          <div class=\"skill-tags\">\n            ${skills.split(',').map(skill => `<span class=\"skill-tag\">${skill.trim()}</span>`).join('')}\n          </div>\n        </div>`;\n      } else {\n        html += `<div class=\"skill-tag\">${line}</div>`;\n      }\n    } else {\n      html += `<div>${line}</div>`;\n    }\n  }\n  \n  if (currentSection) html += '</div></div>';\n  \n  return html;\n}","css":"  .spinner {\n    width: 32px;\n    height: 32px;\n    border: 4px solid #f59e0b;\n    border-top: 4px solid transparent;\n    border-radius: 50%;\n    animation: spin 1s linear infinite;\n  }\n\n  @keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n  }\n\n  .transition-colors {\n    transition: background-color 0.2s ease-in-out, color 0.2s ease-in-out;\n  }\n\n  .focus\\:ring-2:focus {\n    outline: none;\n    box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.5);\n  }\n\n  .focus\\:border-transparent:focus {\n    border-color: transparent;\n  }\n\n  .hover\\:bg-blue-700:hover {\n    background-color: #1d4ed8;\n  }\n\n  .hover\\:bg-green-700:hover {\n    background-color: #15803d;\n  }\n\n  .hover\\:text-blue-800:hover {\n    color: #1e40af;\n  }\n\n  .resize-none {\n    resize: none;\n  }\n\n  .list-disc {\n    list-style-type: disc;\n  }\n\n  .list-inside {\n    list-style-position: inside;\n  }\n\n  .capitalize {\n    text-transform: capitalize;\n  }\n\n  .leading-relaxed {\n    line-height: 1.625;\n  }\n\n  /* Tailwind-like utility classes */\n  .max-w-4xl { max-width: 56rem; }\n  .max-w-6xl { max-width: 72rem; }\n  .max-w-2xl { max-width: 42rem; }\n  .mx-auto { margin-left: auto; margin-right: auto; }\n  .p-6 { padding: 1.5rem; }\n  .p-8 { padding: 2rem; }\n  .p-4 { padding: 1rem; }\n  .p-3 { padding: 0.75rem; }\n  .p-2 { padding: 0.5rem; }\n  .px-6 { padding-left: 1.5rem; padding-right: 1.5rem; }\n  .py-3 { padding-top: 0.75rem; padding-bottom: 0.75rem; }\n  .px-4 { padding-left: 1rem; padding-right: 1rem; }\n  .py-2 { padding-top: 0.5rem; padding-bottom: 0.5rem; }\n  .px-3 { padding-left: 0.75rem; padding-right: 0.75rem; }\n  .py-1 { padding-top: 0.25rem; padding-bottom: 0.25rem; }\n  .px-2 { padding-left: 0.5rem; padding-right: 0.5rem; }\n  .pb-4 { padding-bottom: 1rem; }\n  .pt-1 { padding-top: 0.25rem; }\n  .ml-4 { margin-left: 1rem; }\n  .mr-2 { margin-right: 0.5rem; }\n  .mb-2 { margin-bottom: 0.5rem; }\n  .mb-4 { margin-bottom: 1rem; }\n  .mb-6 { margin-bottom: 1.5rem; }\n  .mb-8 { margin-bottom: 2rem; }\n  .mb-3 { margin-bottom: 0.75rem; }\n  .mt-2 { margin-top: 0.5rem; }\n  .mt-4 { margin-top: 1rem; }\n  .mt-6 { margin-top: 1.5rem; }\n  .mt-8 { margin-top: 2rem; }\n  .mt-1 { margin-top: 0.25rem; }\n  \n  .bg-white { background-color: #ffffff; }\n  .bg-blue-50 { background-color: #eff6ff; }\n  .bg-blue-600 { background-color: #2563eb; }\n  .bg-blue-700 { background-color: #1d4ed8; }\n  .bg-green-50 { background-color: #f0fdf4; }\n  .bg-green-600 { background-color: #16a34a; }\n  .bg-green-100 { background-color: #dcfce7; }\n  .bg-yellow-50 { background-color: #fefce8; }\n  .bg-purple-50 { background-color: #faf5ff; }\n  .bg-gray-50 { background-color: #f9fafb; }\n  .bg-red-100 { background-color: #fee2e2; }\n  .bg-blue-100 { background-color: #dbeafe; }\n  \n  .text-white { color: #ffffff; }\n  .text-gray-800 { color: #1f2937; }\n  .text-gray-600 { color: #4b5563; }\n  .text-gray-700 { color: #374151; }\n  .text-gray-500 { color: #6b7280; }\n  .text-blue-600 { color: #2563eb; }\n  .text-blue-700 { color: #1d4ed8; }\n  .text-blue-800 { color: #1e40af; }\n  .text-green-700 { color: #15803d; }\n  .text-green-800 { color: #166534; }\n  .text-green-500 { color: #22c55e; }\n  .text-red-500 { color: #ef4444; }\n  .text-red-700 { color: #b91c1c; }\n  .text-red-800 { color: #991b1b; }\n  .text-yellow-800 { color: #92400e; }\n  .text-yellow-700 { color: #a16207; }\n  .text-purple-800 { color: #6b21a8; }\n  .text-purple-700 { color: #7c2d12; }\n  .text-purple-600 { color: #9333ea; }\n  \n  .text-3xl { font-size: 1.875rem; line-height: 2.25rem; }\n  .text-2xl { font-size: 1.5rem; line-height: 2rem; }\n  .text-xl { font-size: 1.25rem; line-height: 1.75rem; }\n  .text-4xl { font-size: 2.25rem; line-height: 2.5rem; }\n  .text-sm { font-size: 0.875rem; line-height: 1.25rem; }\n  .text-xs { font-size: 0.75rem; line-height: 1rem; }\n  \n  .font-bold { font-weight: 700; }\n  .font-semibold { font-weight: 600; }\n  .font-medium { font-weight: 500; }\n  \n  .rounded-lg { border-radius: 0.5rem; }\n  .rounded-full { border-radius: 9999px; }\n  .rounded { border-radius: 0.25rem; }\n  \n  .border { border-width: 1px; }\n  .border-2 { border-width: 2px; }\n  .border-b { border-bottom-width: 1px; }\n  .border-b-2 { border-bottom-width: 2px; }\n  .border-dashed { border-style: dashed; }\n  .border-gray-300 { border-color: #d1d5db; }\n  .border-gray-200 { border-color: #e5e7eb; }\n  .border-blue-300 { border-color: #93c5fd; }\n  .border-blue-600 { border-color: #2563eb; }\n  .border-blue-200 { border-color: #bfdbfe; }\n  \n  .w-full { width: 100%; }\n  .w-24 { width: 6rem; }\n  .w-8 { width: 2rem; }\n  .w-32 { width: 8rem; }\n  .h-24 { height: 6rem; }\n  .h-8 { height: 2rem; }\n  .h-32 { height: 8rem; }\n  \n  .flex { display: flex; }\n  .grid { display: grid; }\n  .hidden { display: none; }\n  .block { display: block; }\n  \n  .items-center { align-items: center; }\n  .items-start { align-items: flex-start; }\n  .justify-center { justify-content: center; }\n  .justify-between { justify-content: space-between; }\n  \n  .space-y-4 > * + * { margin-top: 1rem; }\n  .space-y-3 > * + * { margin-top: 0.75rem; }\n  .space-y-2 > * + * { margin-top: 0.5rem; }\n  .space-y-1 > * + * { margin-top: 0.25rem; }\n  .space-x-4 > * + * { margin-left: 1rem; }\n  \n  .gap-6 { gap: 1.5rem; }\n  .gap-4 { gap: 1rem; }\n  .gap-2 { gap: 0.5rem; }\n  .gap-1 { gap: 0.25rem; }\n  \n  .flex-wrap { flex-wrap: wrap; }\n  .text-center { text-align: center; }\n  .text-right { text-align: right; }\n  \n  .cursor-pointer { cursor: pointer; }\n  .shadow-sm { box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05); }\n  \n  .relative { position: relative; }\n  .absolute { position: absolute; }\n  .inset-0 { top: 0; right: 0; bottom: 0; left: 0; }\n  \n  .transform { transform: translateX(var(--tw-translate-x)) translateY(var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }\n  .-rotate-90 { --tw-rotate: -90deg; }\n  \n  @media (min-width: 768px) {\n    .md\\:grid-cols-3 { grid-template-columns: repeat(3, minmax(0, 1fr)); }\n    .md\\:grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); }\n  }\n  \n  @media (min-width: 1024px) {\n    .lg\\:grid-cols-3 { grid-template-columns: repeat(3, minmax(0, 1fr)); }\n  }","html":"<div class=\"max-w-4xl mx-auto p-6 bg-white\">\n  {#if currentStep === 'upload'}\n    <div class=\"text-center mb-8\">\n      <h1 class=\"text-3xl font-bold text-gray-800 mb-2\">\n        <i class=\"fas fa-file-alt text-blue-600 mr-3\"></i>\n        Resume Evaluator & Editor\n      </h1>\n      <p class=\"text-gray-600\">Upload your resume, get AI-powered insights, and create an ATS-optimized version</p>\n    </div>\n\n    <!-- Progress Steps -->\n    <div class=\"flex justify-center mb-8\">\n      <div class=\"flex items-center space-x-4\">\n        {#each ['upload', 'api-key', 'evaluation', 'job-desc', 'improved'] as step, index}\n          <div class=\"flex items-center\">\n            <div class=\"w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium {\n              currentStep === step ? 'bg-blue-600 text-white' : \n              ['upload', 'api-key', 'evaluation', 'job-desc', 'improved'].indexOf(currentStep) > index ? \n              'bg-green-500 text-white' : 'bg-gray-300 text-gray-600'\n            }\">\n              {index + 1}\n            </div>\n            {#if index < 4}\n              <div class=\"w-8 h-0.5 bg-gray-300 mx-2\"></div>\n            {/if}\n          </div>\n        {/each}\n      </div>\n    </div>\n\n    <!-- Error Display -->\n    {#if error}\n      <div class=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6\">\n        <i class=\"fas fa-exclamation-triangle mr-2\"></i>\n        {error}\n      </div>\n    {/if}\n\n    <!-- Loading Spinner -->\n    {#if loading}\n      <div class=\"text-center mb-6\">\n        <div class=\"inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n        <p class=\"mt-2 text-gray-600\">\n          {currentStep === 'upload' ? 'Extracting text from PDF...' : \n           currentStep === 'api-key' ? 'Analyzing resume with AI...' : \n           'Processing...'}\n        </p>\n      </div>\n    {/if}\n\n    <!-- Step 1: File Upload -->\n    <div class=\"bg-white rounded-lg shadow-lg p-8\">\n      <h2 class=\"text-2xl font-semibold mb-6 text-center\">Upload Your Resume</h2>\n      <div class=\"border-2 border-dashed border-gray-300 rounded-lg p-8 text-center hover:border-blue-400 transition-colors\">\n        <i class=\"fas fa-cloud-upload-alt text-4xl text-gray-400 mb-4\"></i>\n        <p class=\"text-gray-600 mb-4\">Drag and drop your PDF resume here, or click to browse</p>\n        <input\n          type=\"file\"\n          accept=\".pdf\"\n          on:change={handleFileUpload}\n          class=\"hidden\"\n          id=\"resume-upload\"\n          bind:this={fileInput}\n        />\n        <label\n          for=\"resume-upload\"\n          class=\"bg-blue-600 text-white px-6 py-2 rounded-lg cursor-pointer hover:bg-blue-700 transition-colors\"\n        >\n          Choose PDF File\n        </label>\n      </div>\n      {#if resumeFile}\n        <div class=\"mt-4 p-4 bg-green-50 rounded-lg\">\n          <i class=\"fas fa-check-circle text-green-600 mr-2\"></i>\n          File uploaded: {resumeFile.name}\n        </div>\n      {/if}\n      \n      <div class=\"mt-6 p-4 bg-blue-50 rounded-lg\">\n        <h3 class=\"font-semibold text-blue-800 mb-2\">\n          <i class=\"fas fa-info-circle mr-2\"></i>\n          PDF Processing Features:\n        </h3>\n        <ul class=\"text-sm text-blue-700 space-y-1\">\n          <li>• Real-time PDF text extraction using PDF.js</li>\n          <li>• Supports multi-page PDF documents</li>\n          <li>• Extracts actual content from your resume</li>\n          <li>• No mock or placeholder data used</li>\n        </ul>\n      </div>\n    </div>\n  {/if}\n\n  {#if currentStep === 'api-key'}\n    <div class=\"bg-white rounded-lg shadow-lg p-8\">\n      <h2 class=\"text-2xl font-semibold mb-6\">Enter Google Gemini API Key</h2>\n      <div class=\"mb-6\">\n        <label for=\"api-key-input\" class=\"block text-sm font-medium text-gray-700 mb-2\">\n          API Key <span class=\"text-red-500\">*</span>\n        </label>\n        <input\n          id=\"api-key-input\"\n          type=\"password\"\n          bind:value={apiKey}\n          placeholder=\"Enter your Google Gemini API key\"\n          class=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n        />\n        <p class=\"text-sm text-gray-500 mt-2\">\n          <i class=\"fas fa-info-circle mr-1\"></i>\n          Get your API key from <a href=\"https://makersuite.google.com/app/apikey\" target=\"_blank\" class=\"text-blue-600 hover:underline\">Google AI Studio</a>\n        </p>\n      </div>\n      \n      <!-- Show extracted resume text preview -->\n      {#if resumeText}\n        <div class=\"mb-6\">\n          <h3 class=\"text-lg font-medium text-gray-700 mb-2\">Extracted Resume Content Preview:</h3>\n          <div class=\"bg-gray-50 p-4 rounded-lg border max-h-40 overflow-y-auto\">\n            <pre class=\"whitespace-pre-wrap text-sm text-gray-700\">\n              {resumeText.substring(0, 500)}...\n            </pre>\n          </div>\n          <p class=\"text-sm text-green-600 mt-2\">\n            <i class=\"fas fa-check-circle mr-1\"></i>\n            Successfully extracted {resumeText.length} characters from your PDF\n          </p>\n        </div>\n      {/if}\n      \n      <button\n        on:click={evaluateResume}\n        disabled={!apiKey || loading}\n        class=\"w-full bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 disabled:bg-gray-400 transition-colors\"\n      >\n        <i class=\"fas fa-search mr-2\"></i>\n        Analyze Resume with AI\n      </button>\n    </div>\n  {/if}\n\n  {#if currentStep === 'evaluation' && evaluation}\n    <div class=\"bg-white rounded-lg shadow-lg p-8\">\n      <h2 class=\"text-2xl font-semibold mb-6\">AI Resume Analysis Results</h2>\n      \n      <!-- Score Cards - Smaller circles -->\n      <div class=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-8\">\n        <div use:ScoreCircle={{ score: evaluation.overallScore, label: \"Overall Score\" }}></div>\n        <div use:ScoreCircle={{ score: evaluation.atsScore, label: \"ATS Score\" }}></div>\n        <div use:ScoreCircle={{ score: evaluation.readabilityScore, label: \"Readability\" }}></div>\n        <div use:ScoreCircle={{ score: evaluation.keywordMatch, label: \"Keywords\" }}></div>\n      </div>\n\n      <!-- Strengths and Weaknesses -->\n      <div class=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-8\">\n        <div>\n          <h3 class=\"text-lg font-semibold text-green-600 mb-3\">\n            <i class=\"fas fa-check-circle mr-2\"></i>Strengths\n          </h3>\n          <ul class=\"space-y-2\">\n            {#each evaluation.strengths as strength}\n              <li class=\"flex items-start\">\n                <i class=\"fas fa-plus text-green-500 mr-2 mt-1\"></i>\n                <span class=\"text-gray-700\">{strength}</span>\n              </li>\n            {/each}\n          </ul>\n        </div>\n        <div>\n          <h3 class=\"text-lg font-semibold text-red-600 mb-3\">\n            <i class=\"fas fa-exclamation-triangle mr-2\"></i>Areas for Improvement\n          </h3>\n          <ul class=\"space-y-2\">\n            {#each evaluation.weaknesses as weakness}\n              <li class=\"flex items-start\">\n                <i class=\"fas fa-minus text-red-500 mr-2 mt-1\"></i>\n                <span class=\"text-gray-700\">{weakness}</span>\n              </li>\n            {/each}\n          </ul>\n        </div>\n      </div>\n\n      <!-- Suggestions -->\n      <div class=\"mb-8\">\n        <h3 class=\"text-lg font-semibold text-blue-600 mb-3\">\n          <i class=\"fas fa-lightbulb mr-2\"></i>AI Recommendations\n        </h3>\n        <ul class=\"space-y-2\">\n          {#each evaluation.suggestions as suggestion}\n            <li class=\"flex items-start\">\n              <i class=\"fas fa-arrow-right text-blue-500 mr-2 mt-1\"></i>\n              <span class=\"text-gray-700\">{suggestion}</span>\n            </li>\n          {/each}\n        </ul>\n      </div>\n\n      <button\n        on:click={() => currentStep = 'job-desc'}\n        class=\"w-full bg-green-600 text-white py-3 rounded-lg hover:bg-green-700 transition-colors\"\n      >\n        <i class=\"fas fa-edit mr-2\"></i>\n        Optimize My Resume\n      </button>\n    </div>\n  {/if}\n\n  {#if currentStep === 'job-desc'}\n    <div class=\"bg-white rounded-lg shadow-lg p-8\">\n      <h2 class=\"text-2xl font-semibold mb-6\">Target Job Description</h2>\n      <div class=\"mb-6\">\n        <label for=\"job-description-input\" class=\"block text-sm font-medium text-gray-700 mb-2\">\n          Paste the job description you're applying for <span class=\"text-red-500\">*</span>\n        </label>\n        <textarea\n          id=\"job-description-input\"\n          bind:value={jobDescription}\n          placeholder=\"Paste the complete job description here...\"\n          rows=\"10\"\n          class=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n        ></textarea>\n        <p class=\"text-sm text-gray-500 mt-2\">\n          <i class=\"fas fa-info-circle mr-1\"></i>\n          AI will optimize your resume using keywords and requirements from this job description\n        </p>\n      </div>\n      <button\n        on:click={improveResume}\n        disabled={!jobDescription.trim() || loading}\n        class=\"w-full bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 disabled:bg-gray-400 transition-colors\"\n      >\n        <i class=\"fas fa-magic mr-2\"></i>\n        Generate Optimized Resume\n      </button>\n    </div>\n  {/if}\n\n  {#if currentStep === 'improved' && improvedResume}\n    <div class=\"bg-white rounded-lg shadow-lg p-8\">\n      <div class=\"flex justify-between items-center mb-6\">\n        <h2 class=\"text-2xl font-semibold\">Your Optimized Resume</h2>\n        <div class=\"space-x-2\">\n          <button\n            on:click={downloadResumeAsText}\n            class=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors\"\n            aria-label=\"Download resume as text file\"\n          >\n            <i class=\"fas fa-download mr-2\"></i>\n            Download TXT\n          </button>\n          <button\n            on:click={downloadResumeAsHTML}\n            class=\"bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors\"\n            aria-label=\"Download resume as HTML file\"\n          >\n            <i class=\"fas fa-file-code mr-2\"></i>\n            Download HTML\n          </button>\n          <button\n            on:click={copyToClipboard}\n            class=\"bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 transition-colors\"\n            aria-label=\"Copy resume to clipboard\"\n          >\n            <i class=\"fas fa-copy mr-2\"></i>\n            Copy\n          </button>\n          <button\n            on:click={resetApp}\n            class=\"bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 transition-colors\"\n            aria-label=\"Start over with new resume\"\n          >\n            <i class=\"fas fa-redo mr-2\"></i>\n            Start Over\n          </button>\n        </div>\n      </div>\n      \n      <div class=\"bg-gray-50 p-6 rounded-lg border\" role=\"region\" aria-label=\"Optimized resume content\">\n        <pre class=\"whitespace-pre-wrap text-sm text-gray-800\">\n          {improvedResume}\n        </pre>\n      </div>\n      \n      <div class=\"mt-6 p-4 bg-green-50 rounded-lg\">\n        <h3 class=\"font-semibold text-green-800 mb-2\">\n          <i class=\"fas fa-check-circle mr-2\"></i>\n          AI Optimizations Applied:\n        </h3>\n        <ul class=\"text-sm text-green-700 space-y-1\">\n          <li>• Enhanced with job-specific keywords from your actual resume content</li>\n          <li>• Improved ATS compatibility and formatting</li>\n          <li>• Optimized structure and section organization</li>\n          <li>• Maintained all your original factual information</li>\n          <li>• Applied professional formatting standards</li>\n          <li>• No fictional data added - only your real content enhanced</li>\n        </ul>\n      </div>\n    </div>\n  {/if}\n</div>"},"fields":[],"content":{"en":{}},"site":"192117ab-0bc1-43ad-8aac-51a7c10feb5e"},{"id":"ccc0c0d4-80b2-499e-a84d-d8581e1661b7","name":"New Block","code":{"js":"import { onMount } from 'svelte';\n\n  \n  // Application State\n  let isPlaying = false;\n  let currentTrack = null;\n  let searchResults = [];\n  let activeTab = 'url';\n  \n  // Form inputs\n  let urlInput = '';\n  let searchInput = '';\n  \n  // Player state\n  let currentTime = 0;\n  let totalTime = 0;\n  let volume = 50;\n  let progress = 0;\n  \n  // Loading states\n  let isLoadingUrl = false;\n  let isSearching = false;\n  \n  // Toast notification\n  let toast = { show: false, message: '', type: 'success' };\n  \n  // Audio element reference\n  let audioElement;\n  \n  // Utility Functions\n  function isValidYouTubeUrl(url) {\n    const patterns = [\n      /^https?:\\/\\/(www\\.)?youtube\\.com\\/watch\\?v=[\\w-]+/,\n      /^https?:\\/\\/youtu\\.be\\/[\\w-]+/,\n      /^https?:\\/\\/(www\\.)?youtube\\.com\\/embed\\/[\\w-]+/\n    ];\n    return patterns.some(pattern => pattern.test(url));\n  }\n  \n  function extractVideoId(url) {\n    const patterns = [\n      /(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/|youtube\\.com\\/embed\\/)([^&\\n?#]+)/\n    ];\n    \n    for (const pattern of patterns) {\n      const match = url.match(pattern);\n      if (match) return match[1];\n    }\n    return null;\n  }\n  \n  function formatTime(seconds) {\n    const mins = Math.floor(seconds / 60);\n    const secs = Math.floor(seconds % 60);\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  }\n  \n  function showToast(message, type = 'success') {\n    toast = { show: true, message, type };\n    setTimeout(() => {\n      toast.show = false;\n    }, 3000);\n  }\n  \n  // Audio Loading Functions\n  async function loadAudioFromUrl() {\n    if (!urlInput.trim()) {\n      showToast('Please enter a YouTube URL', 'error');\n      return;\n    }\n    \n    if (!isValidYouTubeUrl(urlInput)) {\n      showToast('Please enter a valid YouTube URL', 'error');\n      return;\n    }\n    \n    isLoadingUrl = true;\n    \n    try {\n      showToast('Loading audio...', 'warning');\n      \n      const videoId = extractVideoId(urlInput);\n      const videoInfo = await getVideoInfo(videoId);\n      const audioFormat = chooseAudioFormat(videoInfo.formats);\n      \n      if (!audioFormat) {\n        throw new Error('No audio stream available');\n      }\n      \n      const audioData = {\n        title: videoInfo.title,\n        artist: videoInfo.author,\n        duration: videoInfo.duration,\n        audioUrl: audioFormat.url,\n        videoId: videoId\n      };\n      \n      loadAudio(audioData);\n      showToast('Audio loaded successfully!', 'success');\n      \n    } catch (error) {\n      console.error('Loading error:', error);\n      showToast(`Failed to load audio: ${error.message}`, 'error');\n    } finally {\n      isLoadingUrl = false;\n    }\n  }\n  \n  async function searchYouTube() {\n    if (!searchInput.trim()) {\n      showToast('Please enter a search query', 'error');\n      return;\n    }\n    \n    isSearching = true;\n    \n    try {\n      // Simulate search\n      await new Promise(resolve => setTimeout(resolve, 1500));\n      \n      searchResults = [\n        {\n          id: '1',\n          title: `${searchInput} - Official Music Video`,\n          artist: 'Official Artist',\n          duration: '3:45',\n          url: 'https://youtube.com/watch?v=demo1'\n        },\n        {\n          id: '2',\n          title: `${searchInput} (Acoustic Version)`,\n          artist: 'Acoustic Sessions',\n          duration: '4:12',\n          url: 'https://youtube.com/watch?v=demo2'\n        }\n      ];\n      \n      showToast(`Found ${searchResults.length} results`, 'success');\n      \n    } catch (error) {\n      showToast('Search failed', 'error');\n    } finally {\n      isSearching = false;\n    }\n  }\n  \n  async function getVideoInfo(videoId) {\n    // Mock response for demo\n    return {\n      title: 'Demo Audio Track',\n      author: 'Demo Channel',\n      duration: 180,\n      formats: [\n        {\n          itag: 140,\n          mimeType: 'audio/mp4',\n          bitrate: 128,\n          url: 'https://www.learningcontainer.com/wp-content/uploads/2020/02/Kalimba.mp3',\n          hasAudio: true,\n          hasVideo: false\n        }\n      ]\n    };\n  }\n  \n  function chooseAudioFormat(formats) {\n    return formats.find(format => format.hasAudio && !format.hasVideo) || formats[0];\n  }\n  \n  function loadAudio(audioData) {\n    currentTrack = audioData;\n    audioElement.src = audioData.audioUrl;\n  }\n  \n  // Player Controls\n  function togglePlayPause() {\n    if (!currentTrack) {\n      showToast('Please load a track first', 'warning');\n      return;\n    }\n    \n    if (isPlaying) {\n      audioElement.pause();\n    } else {\n      audioElement.play();\n    }\n  }\n  \n  function seekAudio(e) {\n    if (!currentTrack) return;\n    \n    const rect = e.currentTarget.getBoundingClientRect();\n    const percent = (e.clientX - rect.left) / rect.width;\n    const seekTime = percent * audioElement.duration;\n    audioElement.currentTime = seekTime;\n  }\n  \n  function updateVolume() {\n    audioElement.volume = volume / 100;\n  }\n  \n  function selectResult(result) {\n    urlInput = result.url;\n    loadAudioFromUrl();\n  }\n  \n  // Audio Event Handlers\n  function onPlay() {\n    isPlaying = true;\n  }\n  \n  function onPause() {\n    isPlaying = false;\n  }\n  \n  function onTimeUpdate() {\n    currentTime = audioElement.currentTime;\n    if (audioElement.duration) {\n      progress = (currentTime / audioElement.duration) * 100;\n    }\n  }\n  \n  function onLoadedMetadata() {\n    totalTime = audioElement.duration;\n  }\n  \n  function onError() {\n    showToast('Failed to load audio', 'error');\n    isPlaying = false;\n  }\n\n  export async function GET({ params }) {\n  try {\n    const { videoId } = params;\n    const info = await ytdl.getInfo(videoId);\n    \n    return new Response(JSON.stringify({\n      title: info.videoDetails.title,\n      author: info.videoDetails.author.name,\n      duration: parseInt(info.videoDetails.lengthSeconds),\n      formats: info.formats.filter(format => format.hasAudio)\n    }));\n  } catch (error) {\n    return new Response(JSON.stringify({ error: error.message }), {\n      status: 500\n    });\n  }\n}\n  \n  onMount(() => {\n    updateVolume();\n    showToast('Audio Player ready!', 'success');\n  });","css":":global(:root) {\n    --bg-primary: #0a0a0a;\n    --bg-secondary: #1a1a1a;\n    --bg-tertiary: #2a2a2a;\n    --text-primary: #ffffff;\n    --text-secondary: #b3b3b3;\n    --text-muted: #666666;\n    --accent-color: #1db954;\n    --border-color: #333333;\n    --border-radius: 8px;\n    --shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\n    --transition: all 0.2s ease;\n  }\n\n  :global(*) {\n    box-sizing: border-box;\n  }\n\n  :global(body) {\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n    background: var(--bg-primary);\n    color: var(--text-primary);\n    margin: 0;\n    padding: 0;\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n  }\n\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n  background: var(--bg-primary);\n  color: var(--text-primary);\n  margin: 0;\n  padding: 0;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n.app-container {\n  width: 100%;\n  max-width: 900px;\n  padding: 2rem;\n}\n\n.header {\n  text-align: center;\n  margin-bottom: 3rem;\n}\n\n.header h1 {\n  font-size: 3rem;\n  font-weight: 700;\n  margin: 0 0 1rem 0;\n  color: var(--text-primary);\n}\n\n.header p {\n  font-size: 1.1rem;\n  color: var(--text-secondary);\n  margin: 0;\n  line-height: 1.5;\n}\n\n.player-container {\n  background: var(--bg-secondary);\n  border: 1px solid var(--border-color);\n  border-radius: var(--border-radius);\n  padding: 2rem;\n  margin-bottom: 2rem;\n  box-shadow: var(--shadow);\n}\n\n.audio-controls {\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n  margin-bottom: 1.5rem;\n}\n\n.time-display {\n  font-size: 0.9rem;\n  color: var(--text-secondary);\n  min-width: 40px;\n  font-family: 'Courier New', monospace;\n}\n\n.progress-container {\n  flex: 1;\n  height: 4px;\n  background: var(--bg-tertiary);\n  border-radius: 2px;\n  cursor: pointer;\n  position: relative;\n}\n\n.progress-bar {\n  height: 100%;\n  background: var(--text-primary);\n  border-radius: 2px;\n  width: 0%;\n  transition: width 0.1s ease;\n}\n\n.progress-handle {\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n  width: 12px;\n  height: 12px;\n  background: var(--text-primary);\n  border-radius: 50%;\n  cursor: pointer;\n  opacity: 0;\n  transition: opacity 0.2s ease;\n}\n\n.progress-container:hover .progress-handle {\n  opacity: 1;\n}\n\n.volume-controls {\n  display: flex;\n  align-items: center;\n  gap: 0.75rem;\n}\n\n.play-button {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  background: transparent;\n  border: 2px solid var(--text-primary);\n  color: var(--text-primary);\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 1rem;\n  transition: var(--transition);\n}\n\n.play-button:hover {\n  background: var(--text-primary);\n  color: var(--bg-primary);\n}\n\n.volume-icon {\n  color: var(--text-secondary);\n  font-size: 1.1rem;\n}\n\n.volume-slider {\n  width: 80px;\n  height: 4px;\n  background: var(--bg-tertiary);\n  border-radius: 2px;\n  outline: none;\n  cursor: pointer;\n  -webkit-appearance: none;\n  appearance: none;\n}\n\n.volume-slider::-webkit-slider-thumb {\n  -webkit-appearance: none;\n  appearance: none;\n  width: 12px;\n  height: 12px;\n  background: var(--text-primary);\n  border-radius: 50%;\n  cursor: pointer;\n}\n\n.volume-slider::-moz-range-thumb {\n  width: 12px;\n  height: 12px;\n  background: var(--text-primary);\n  border-radius: 50%;\n  cursor: pointer;\n  border: none;\n}\n\n.input-container {\n  background: var(--bg-secondary);\n  border: 1px solid var(--border-color);\n  border-radius: var(--border-radius);\n  padding: 2rem;\n  box-shadow: var(--shadow);\n}\n\n.input-tabs {\n  display: flex;\n  margin-bottom: 1.5rem;\n  background: var(--bg-tertiary);\n  border-radius: var(--border-radius);\n  padding: 4px;\n}\n\n.tab-button {\n  flex: 1;\n  padding: 0.75rem 1rem;\n  background: transparent;\n  border: none;\n  color: var(--text-secondary);\n  cursor: pointer;\n  border-radius: calc(var(--border-radius) - 4px);\n  font-size: 0.9rem;\n  font-weight: 500;\n  transition: var(--transition);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 0.5rem;\n}\n\n.tab-button.active {\n  background: var(--bg-secondary);\n  color: var(--text-primary);\n}\n\n.tab-button:hover:not(.active) {\n  color: var(--text-primary);\n}\n\n.input-form {\n  display: flex;\n  gap: 0.75rem;\n  align-items: center;\n}\n\n.url-input {\n  flex: 1;\n  padding: 0.875rem 1rem;\n  background: var(--bg-primary);\n  border: 1px solid var(--border-color);\n  border-radius: var(--border-radius);\n  color: var(--text-primary);\n  font-size: 0.95rem;\n  outline: none;\n  transition: var(--transition);\n}\n\n.url-input:focus {\n  border-color: var(--text-primary);\n  box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.1);\n}\n\n.url-input::placeholder {\n  color: var(--text-muted);\n}\n\n.load-button {\n  padding: 0.875rem 1.5rem;\n  background: var(--text-primary);\n  color: var(--bg-primary);\n  border: none;\n  border-radius: var(--border-radius);\n  font-size: 0.95rem;\n  font-weight: 600;\n  cursor: pointer;\n  transition: var(--transition);\n  white-space: nowrap;\n}\n\n.load-button:hover {\n  background: var(--text-secondary);\n}\n\n.load-button:disabled {\n  background: var(--text-muted);\n  cursor: not-allowed;\n}\n\n.search-results {\n  margin-top: 1.5rem;\n}\n\n.result-item {\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n  padding: 1rem;\n  background: var(--bg-primary);\n  border: 1px solid var(--border-color);\n  border-radius: var(--border-radius);\n  margin-bottom: 0.75rem;\n  cursor: pointer;\n  transition: var(--transition);\n}\n\n.result-item:hover {\n  border-color: var(--text-primary);\n  background: var(--bg-tertiary);\n}\n\n.result-thumbnail {\n  width: 60px;\n  height: 45px;\n  background: var(--bg-tertiary);\n  border-radius: 4px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: var(--text-muted);\n}\n\n.result-info {\n  flex: 1;\n}\n\n.result-title {\n  font-weight: 500;\n  margin-bottom: 0.25rem;\n  color: var(--text-primary);\n  line-height: 1.3;\n}\n\n.result-meta {\n  font-size: 0.85rem;\n  color: var(--text-secondary);\n}\n\n.player-info {\n  text-align: center;\n  margin-bottom: 1.5rem;\n  padding: 1rem 0;\n  border-bottom: 1px solid var(--border-color);\n}\n\n.track-title {\n  font-size: 1.2rem;\n  font-weight: 600;\n  margin-bottom: 0.5rem;\n  color: var(--text-primary);\n}\n\n.track-artist {\n  font-size: 0.95rem;\n  color: var(--text-secondary);\n}\n\n.toast {\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  padding: 1rem 1.5rem;\n  border-radius: var(--border-radius);\n  color: var(--text-primary);\n  font-weight: 500;\n  z-index: 1000;\n  box-shadow: var(--shadow);\n}\n\n.toast.success {\n  background: var(--accent-color);\n}\n\n.toast.error {\n  background: #dc2626;\n}\n\n.toast.warning {\n  background: #f59e0b;\n}\n\n@media (max-width: 768px) {\n  .app-container {\n    padding: 1rem;\n  }\n  \n  .header h1 {\n    font-size: 2.5rem;\n  }\n  \n  .player-container,\n  .input-container {\n    padding: 1.5rem;\n  }\n  \n  .input-form {\n    flex-direction: column;\n  }\n  \n  .url-input {\n    width: 100%;\n  }\n  \n  .audio-controls {\n    flex-wrap: wrap;\n    gap: 0.75rem;\n  }\n  \n  .volume-controls {\n    order: 3;\n    width: 100%;\n    justify-content: center;\n  }\n}","html":"<section>\n  <div class=\"app-container\">\n  <header class=\"header\">\n    <h1>YouTube Audio Player</h1>\n    <p>Paste a YouTube URL and enjoy the audio in a clean, distraction-free player.</p>\n  </header>\n\n  <!-- Audio Player -->\n  <div class=\"player-container\">\n    {#if currentTrack}\n      <div class=\"player-info\">\n        <div class=\"track-title\">{currentTrack.title}</div>\n        <div class=\"track-artist\">{currentTrack.artist}</div>\n      </div>\n    {/if}\n    \n    <div class=\"audio-controls\">\n      <div class=\"time-display\">{formatTime(currentTime)}</div>\n      <div \n  class=\"progress-container\" \n  on:click={seekAudio}\n  on:keydown={(e) => e.key === 'Enter' && seekAudio(e)}\n  tabindex=\"0\"\n  role=\"slider\"\n  aria-label=\"Seek audio position\"\n  aria-valuenow={Math.round(progress)}\n  aria-valuemin=\"0\"\n  aria-valuemax=\"100\"\n>\n  <div class=\"progress-bar\" style=\"width: {progress}%\"></div>\n  <div class=\"progress-handle\" style=\"left: {progress}%\"></div>\n</div>\n      <div class=\"time-display\">{formatTime(totalTime)}</div>\n    </div>\n\n    <div class=\"volume-controls\">\n      <button class=\"play-button\" on:click={togglePlayPause}>\n        <i class=\"fas {isPlaying ? 'fa-pause' : 'fa-play'}\"></i>\n      </button>\n      <i class=\"fas fa-volume-up volume-icon\"></i>\n      <input \n        type=\"range\" \n        class=\"volume-slider\" \n        bind:value={volume}\n        on:input={updateVolume}\n        min=\"0\" \n        max=\"100\"\n      >\n    </div>\n\n    <audio \n      bind:this={audioElement}\n      on:play={onPlay}\n      on:pause={onPause}\n      on:timeupdate={onTimeUpdate}\n      on:loadedmetadata={onLoadedMetadata}\n      on:error={onError}\n      preload=\"metadata\"\n    ></audio>\n  </div>\n\n  <!-- Input Section -->\n  <div class=\"input-container\">\n    <div class=\"input-tabs\">\n      <button \n        class=\"tab-button {activeTab === 'url' ? 'active' : ''}\"\n        on:click={() => activeTab = 'url'}\n      >\n        <i class=\"fas fa-link\"></i>\n        URL Input\n      </button>\n      <button \n        class=\"tab-button {activeTab === 'search' ? 'active' : ''}\"\n        on:click={() => activeTab = 'search'}\n      >\n        <i class=\"fas fa-search\"></i>\n        Search YouTube\n      </button>\n    </div>\n\n    <!-- URL Input Tab -->\n    {#if activeTab === 'url'}\n      <div class=\"tab-content\">\n        <form class=\"input-form\" on:submit|preventDefault={loadAudioFromUrl}>\n          <input \n            type=\"url\" \n            class=\"url-input\" \n            bind:value={urlInput}\n            placeholder=\"Enter YouTube URL\" \n            required\n          >\n          <button type=\"submit\" class=\"load-button\" disabled={isLoadingUrl}>\n            {isLoadingUrl ? 'Loading...' : 'Load'}\n          </button>\n        </form>\n      </div>\n    {/if}\n\n    <!-- Search Tab -->\n    {#if activeTab === 'search'}\n      <div class=\"tab-content\">\n        <form class=\"input-form\" on:submit|preventDefault={searchYouTube}>\n          <input \n            type=\"text\" \n            class=\"url-input\" \n            bind:value={searchInput}\n            placeholder=\"Search YouTube\" \n            required\n          >\n          <button type=\"submit\" class=\"load-button\" disabled={isSearching}>\n            {isSearching ? 'Searching...' : 'Search'}\n          </button>\n        </form>\n        \n        {#if searchResults.length > 0}\n          <div class=\"search-results\">\n            {#each searchResults as result}\n              <div class=\"result-item\" \n                on:click={() => selectResult(result)}\n                on:keydown={(e) => e.key === 'Enter' && selectResult(result)}\n                tabindex=\"0\"\n                role=\"button\"\n              >\n                <div class=\"result-thumbnail\">\n                  <i class=\"fas fa-play\"></i>\n                </div>\n                <div class=\"result-info\">\n                  <div class=\"result-title\">{result.title}</div>\n                  <div class=\"result-meta\">{result.artist} • {result.duration}</div>\n                </div>\n              </div>\n            {/each}\n          </div>\n        {/if}\n      </div>\n    {/if}\n  </div>\n</div>\n\n<!-- Toast Notifications -->\n{#if toast.show}\n  <div class=\"toast {toast.type}\">{toast.message}</div>\n{/if}\n</section>"},"fields":[],"content":{"en":{}},"site":"192117ab-0bc1-43ad-8aac-51a7c10feb5e"},{"id":"30fbd6f1-17f5-456b-93c5-747fda488051","name":"New Block","code":{"js":"import { onMount } from 'svelte';\n  \n  let selectedCategory = '';\n  let mainObjective = '';\n  let targetAudience = '';\n  let selectedTone = '';\n  let specificRequirements = '';\n  let outputFormat = '';\n  let generatedPrompt = '';\n  let isGenerating = false;\n  let isTestingAPI = false;\n  let testResult = '';\n  \n  // API Configuration\n  let apiProvider = 'openai';\n  let apiKey = '';\n  let apiModel = 'gpt-3.5-turbo';\n  let showApiConfig = false;\n\n\nconst apiLinks = {\n  openai: 'https://platform.openai.com/api-keys',\n  anthropic: 'https://console.anthropic.com/',\n  google: 'https://makersuite.google.com/app/apikey'\n};\n\n  const apiProviders = {\n    openai: {\n      name: 'OpenAI',\n      models: ['gpt-3.5-turbo', 'gpt-4', 'gpt-4-turbo'],\n      endpoint: 'https://api.openai.com/v1/chat/completions'\n    },\n    anthropic: {\n      name: 'Anthropic (Claude)',\n      models: ['claude-3-haiku-20240307', 'claude-3-sonnet-20240229', 'claude-3-opus-20240229'],\n      endpoint: 'https://api.anthropic.com/v1/messages'\n    },\n    google: {\n      name: 'Google (Gemini)',\n      models: ['gemini-2.5-flash', 'gemini-2.5-pro', 'gemini-pro'],\n      endpoint: 'https://generativelanguage.googleapis.com/v1beta/models'\n    }\n  };\n\n  const categories = {\n    'Business/Marketing': {\n      objectivePlaceholder: 'e.g., Create a marketing campaign for a new product launch',\n      audiencePlaceholder: 'e.g., Small business owners aged 30-50',\n      defaultTone: 'Professional',\n      defaultRequirements: 'Include call-to-action, focus on benefits, mention target metrics',\n      defaultFormat: 'Structured outline with bullet points and key messaging'\n    },\n    'Creative Writing': {\n      objectivePlaceholder: 'e.g., Write a short story about time travel',\n      audiencePlaceholder: 'e.g., Young adult readers interested in sci-fi',\n      defaultTone: 'Creative',\n      defaultRequirements: 'Include character development, engaging plot, vivid descriptions',\n      defaultFormat: 'Narrative format with dialogue and descriptive passages'\n    },\n    'Educational': {\n      objectivePlaceholder: 'e.g., Explain quantum physics concepts for beginners',\n      audiencePlaceholder: 'e.g., High school students with basic science knowledge',\n      defaultTone: 'Educational',\n      defaultRequirements: 'Use simple analogies, include examples, break down complex concepts',\n      defaultFormat: 'Step-by-step explanation with examples and key takeaways'\n    },\n    'General AI Assistant': {\n      objectivePlaceholder: 'e.g., Help plan a weekly meal prep routine',\n      audiencePlaceholder: 'e.g., Busy professionals looking for healthy options',\n      defaultTone: 'Helpful',\n      defaultRequirements: 'Provide practical advice, consider time constraints, include alternatives',\n      defaultFormat: 'Organized list with clear instructions and tips'\n    },\n    'Image Generation': {\n      objectivePlaceholder: 'e.g., Create a logo design for a tech startup',\n      audiencePlaceholder: 'e.g., Modern tech company targeting millennials',\n      defaultTone: 'Descriptive',\n      defaultRequirements: 'Specify style, colors, composition, mood, and visual elements',\n      defaultFormat: 'Detailed visual description with artistic direction'\n    },\n    'Technical/Coding': {\n      objectivePlaceholder: 'e.g., Write a Python function for data validation',\n      audiencePlaceholder: 'e.g., Junior developers learning backend development',\n      defaultTone: 'Technical',\n      defaultRequirements: 'Include error handling, comments, follow best practices',\n      defaultFormat: 'Code with documentation and usage examples'\n    },\n    'Video (VEO 3 AI)': {\n      objectivePlaceholder: 'e.g., Create a product demo video showing app features',\n      audiencePlaceholder: 'e.g., Potential customers evaluating software solutions',\n      defaultTone: 'Engaging',\n      defaultRequirements: 'Define scenes, characters, camera angles, transitions, duration',\n      defaultFormat: 'Scene-by-scene breakdown with visual and audio descriptions'\n    }\n  };\n\n  const toneOptions = ['Professional', 'Creative', 'Educational', 'Helpful', 'Descriptive', 'Technical', 'Engaging', 'Casual', 'Formal', 'Conversational'];\n\n  $: if (selectedCategory && categories[selectedCategory]) {\n    const categoryData = categories[selectedCategory];\n    selectedTone = categoryData.defaultTone;\n    specificRequirements = categoryData.defaultRequirements;\n    outputFormat = categoryData.defaultFormat;\n  }\n\n  $: availableModels = apiProviders[apiProvider]?.models || [];\n\n  $: if (apiProvider && !apiModel) {\n  if (apiProvider === 'google') {\n    apiModel = 'gemini-2.5-flash';\n  } else if (apiProvider === 'anthropic') {\n    apiModel = 'claude-3-haiku-20240307';\n  } else {\n    apiModel = 'gpt-3.5-turbo';\n  }\n}\n\nasync function testAPIConnection() {\n  if (!apiKey) {\n    testResult = 'Please enter an API key first';\n    return;\n  }\n\n  isTestingAPI = true;\n  testResult = '';\n\n  try {\n    const testPrompt = \"Say 'API connection successful' in a friendly way.\";\n    const response = await callAIAPI(\"You are a helpful assistant.\", testPrompt);\n    testResult = '✅ API connection successful!';\n  } catch (error) {\n    testResult = `❌ API test failed: ${error.message}`;\n  } finally {\n    isTestingAPI = false;\n  }\n}\n  async function generatePromptWithAI() {\n    if (!selectedCategory || !mainObjective) {\n      alert('Please fill in at least the category and main objective.');\n      return;\n    }\n\n    if (!apiKey) {\n      alert('Please enter your API key in the configuration.');\n      return;\n    }\n\n    isGenerating = true;\n    \n    try {\n      const systemPrompt = `You are an expert AI prompt engineer. Your task is to create a highly effective, detailed prompt based on the user's requirements. The prompt should be clear, specific, and optimized for getting the best results from AI models.\n\nCreate a professional AI prompt that incorporates all the provided details. Make the prompt actionable and specific. Format it as a single, well-structured prompt that can be directly used with AI models.`;\n\n      const userPrompt = `Create an AI prompt with these specifications:\n\nCategory: ${selectedCategory}\nMain Objective: ${mainObjective}\nTarget Audience: ${targetAudience || 'General audience'}\nTone: ${selectedTone || 'Professional'}\nRequirements: ${specificRequirements || 'Standard quality output'}\nOutput Format: ${outputFormat || 'Clear and organized response'}\n\nPlease generate a comprehensive, well-crafted AI prompt that incorporates all these elements effectively.`;\n\n      const response = await callAIAPI(systemPrompt, userPrompt);\n      generatedPrompt = response;\n    } catch (error) {\n      console.error('Error generating prompt:', error);\n      generatedPrompt = `Error generating prompt: ${error.message}. Please check your API configuration and try again.`;\n    } finally {\n      isGenerating = false;\n    }\n  }\n\n  async function callAIAPI(systemPrompt, userPrompt) {\n    switch (apiProvider) {\n      case 'openai':\n        return await callOpenAI(systemPrompt, userPrompt);\n      case 'anthropic':\n        return await callAnthropic(systemPrompt, userPrompt);\n      case 'google':\n        return await callGoogle(systemPrompt, userPrompt);\n      default:\n        throw new Error('Unsupported API provider');\n    }\n  }\n\n  async function callOpenAI(systemPrompt, userPrompt) {\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${apiKey}`\n      },\n      body: JSON.stringify({\n        model: apiModel,\n        messages: [\n          { role: 'system', content: systemPrompt },\n          { role: 'user', content: userPrompt }\n        ],\n        max_tokens: 1000,\n        temperature: 0.7\n      })\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error?.message || 'OpenAI API request failed');\n    }\n\n    const data = await response.json();\n    return data.choices[0].message.content;\n  }\n\n  async function callAnthropic(systemPrompt, userPrompt) {\n    const response = await fetch('https://api.anthropic.com/v1/messages', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-api-key': apiKey,\n        'anthropic-version': '2023-06-01'\n      },\n      body: JSON.stringify({\n        model: apiModel,\n        max_tokens: 1000,\n        system: systemPrompt,\n        messages: [\n          { role: 'user', content: userPrompt }\n        ]\n      })\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error?.message || 'Anthropic API request failed');\n    }\n\n    const data = await response.json();\n    return data.content[0].text;\n  }\n\n  async function callGoogle(systemPrompt, userPrompt) {\n  const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/${apiModel}:generateContent?key=${apiKey}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      contents: [{\n        parts: [{\n          text: `${systemPrompt}\\n\\n${userPrompt}`\n        }]\n      }],\n      generationConfig: {\n        maxOutputTokens: 1000,\n        temperature: 0.7\n      }\n    })\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error?.message || 'Google API request failed');\n  }\n\n  const data = await response.json();\n  \n  // Better error handling for Google API response\n  if (!data.candidates || data.candidates.length === 0) {\n    throw new Error('No response generated from Google API');\n  }\n  \n  if (!data.candidates[0].content || !data.candidates[0].content.parts || data.candidates[0].content.parts.length === 0) {\n    throw new Error('Invalid response format from Google API');\n  }\n  \n  return data.candidates[0].content.parts[0].text;\n}\n\n  // Load API config from localStorage\n  onMount(() => {\n  const savedConfig = localStorage.getItem('aiPromptGeneratorConfig');\n  if (savedConfig) {\n    const config = JSON.parse(savedConfig);\n    apiProvider = config.apiProvider || 'openai';\n    apiKey = config.apiKey || '';\n    // Set default model based on provider\n    if (config.apiProvider === 'google') {\n      apiModel = config.apiModel || 'gemini-2.5-flash';\n    } else if (config.apiProvider === 'anthropic') {\n      apiModel = config.apiModel || 'claude-3-haiku-20240307';\n    } else {\n      apiModel = config.apiModel || 'gpt-3.5-turbo';\n    }\n  }\n});\n\n  // Save API config to localStorage\n  function saveConfig() {\n    const config = { apiProvider, apiKey, apiModel };\n    localStorage.setItem('aiPromptGeneratorConfig', JSON.stringify(config));\n    showApiConfig = false;\n  }","css":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n  \n  :global(body) {\n    font-family: 'Inter', sans-serif;\n    margin: 0;\n    padding: 0;\n    background-color: #fafafa;\n    color: #1a1a1a;\n  }\n\n  .container {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 3rem;\n    max-width: 1400px;\n    margin: 0 auto;\n    padding: 2rem;\n    min-height: 100vh;\n  }\n\n  .form-section {\n    background: white;\n    border-radius: 16px;\n    padding: 2.5rem;\n    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);\n    height: fit-content;\n  }\n\n  .header {\n    display: flex;\n    align-items: center;\n    gap: 0.75rem;\n    margin-bottom: 2rem;\n    position: relative;\n  }\n\n  .icon {\n    font-size: 1.5rem;\n  }\n\n  h1 {\n    font-size: 1.75rem;\n    font-weight: 600;\n    margin: 0;\n    color: #1a1a1a;\n    flex: 1;\n  }\n\n  .config-btn {\n    background: #f3f4f6;\n    border: none;\n    border-radius: 8px;\n    padding: 0.5rem;\n    cursor: pointer;\n    font-size: 1.2rem;\n    transition: background-color 0.2s ease;\n  }\n\n  .config-btn:hover {\n    background: #e5e7eb;\n  }\n\n  .api-config {\n    background: #f8fafc;\n    border: 1px solid #e2e8f0;\n    border-radius: 12px;\n    padding: 1.5rem;\n    margin-bottom: 2rem;\n  }\n\n  .api-config h3 {\n    margin: 0 0 1rem 0;\n    font-size: 1.1rem;\n    font-weight: 600;\n    color: #374151;\n  }\n\n  .help-text {\n    display: block;\n    margin-top: 0.25rem;\n    font-size: 0.8rem;\n    color: #6b7280;\n  }\n\n  .config-actions {\n    display: flex;\n    gap: 0.75rem;\n    margin-top: 1rem;\n  }\n\n  .save-config-btn {\n    background: #10b981;\n    color: white;\n    border: none;\n    padding: 0.5rem 1rem;\n    border-radius: 6px;\n    font-size: 0.9rem;\n    cursor: pointer;\n    transition: background-color 0.2s ease;\n  }\n\n  .save-config-btn:hover {\n    background: #059669;\n  }\n\n  .cancel-btn {\n    background: #6b7280;\n    color: white;\n    border: none;\n    padding: 0.5rem 1rem;\n    border-radius: 6px;\n    font-size: 0.9rem;\n    cursor: pointer;\n    transition: background-color 0.2s ease;\n  }\n\n  .cancel-btn:hover {\n    background: #4b5563;\n  }\n\n  .form-group {\n    margin-bottom: 1.5rem;\n  }\n\n  label {\n    display: block;\n    font-weight: 500;\n    margin-bottom: 0.5rem;\n    color: #374151;\n    font-size: 0.95rem;\n  }\n\n  input, select, textarea {\n    width: 100%;\n    padding: 0.75rem;\n    border: 1.5px solid #e5e7eb;\n    border-radius: 8px;\n    font-size: 0.95rem;\n    font-family: 'Inter', sans-serif;\n    transition: border-color 0.2s ease, box-shadow 0.2s ease;\n    background: white;\n  }\n\n  input:focus, select:focus, textarea:focus {\n    outline: none;\n    border-color: #6366f1;\n    box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);\n  }\n\n  input::placeholder, textarea::placeholder {\n    color: #9ca3af;\n  }\n\n  textarea {\n    resize: vertical;\n    min-height: 80px;\n  }\n\n  .generate-btn {\n    width: 100%;\n    background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);\n    color: white;\n    border: none;\n    padding: 1rem 1.5rem;\n    border-radius: 12px;\n    font-size: 1rem;\n    font-weight: 600;\n    cursor: pointer;\n    transition: transform 0.2s ease, box-shadow 0.2s ease;\n    font-family: 'Inter', sans-serif;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 0.5rem;\n  }\n\n  .generate-btn:hover:not(:disabled) {\n    transform: translateY(-1px);\n    box-shadow: 0 8px 25px rgba(99, 102, 241, 0.3);\n  }\n\n  .generate-btn:active:not(:disabled) {\n    transform: translateY(0);\n  }\n\n  .generate-btn:disabled {\n    opacity: 0.6;\n    cursor: not-allowed;\n  }\n\n  .spinner {\n    width: 16px;\n    height: 16px;\n    border: 2px solid rgba(255, 255, 255, 0.3);\n    border-top: 2px solid white;\n    border-radius: 50%;\n    animation: spin 1s linear infinite;\n  }\n\n  @keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n  }\n\n  .api-warning {\n    text-align: center;\n    color: #f59e0b;\n    font-size: 0.9rem;\n    margin-top: 1rem;\n    padding: 0.75rem;\n    background: #fef3c7;\n    border-radius: 8px;\n  }\n\n  .output-section {\n    background: white;\n    border-radius: 16px;\n    padding: 2.5rem;\n    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);\n    height: fit-content;\n  }\n\n  h2 {\n    font-size: 1.5rem;\n    font-weight: 600;\n    margin: 0 0 1.5rem 0;\n    color: #1a1a1a;\n  }\n\n  .output-content {\n    min-height: 200px;\n  }\n\n  .placeholder {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    text-align: center;\n    padding: 3rem 1rem;\n    color: #6b7280;\n  }\n\n  .placeholder-icon {\n    font-size: 3rem;\n    margin-bottom: 1rem;\n    opacity: 0.5;\n  }\n\n  .placeholder p {\n    margin: 0;\n    font-size: 1rem;\n    line-height: 1.5;\n  }\n\n  .prompt-display {\n    background: #f8fafc;\n    border: 1px solid #e2e8f0;\n    border-radius: 12px;\n    overflow: hidden;\n  }\n\n  .prompt-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 1rem 1.5rem;\n    background: #e2e8f0;\n    border-bottom: 1px solid #cbd5e1;\n  }\n\n  .prompt-label {\n    font-weight: 600;\n    color: #374151;\n    font-size: 0.9rem;\n  }\n\n  .copy-btn {\n    background: #6366f1;\n    color: white;\n    border: none;\n    padding: 0.4rem 0.8rem;\n    border-radius: 6px;\n    font-size: 0.8rem;\n    cursor: pointer;\n    transition: background-color 0.2s ease;\n  }\n\n  .copy-btn:hover {\n    background: #4f46e5;\n  }\n\n  .prompt-text {\n    padding: 1.5rem;\n    line-height: 1.6;\n    font-size: 0.95rem;\n    white-space: pre-wrap;\n    color: #1e293b;\n    font-weight: 500;\n  }\n\n.api-link {\n  margin-left: 0.5rem;\n  text-decoration: none;\n  font-size: 0.9rem;\n  opacity: 0.7;\n  transition: opacity 0.2s ease;\n}\n\n.api-link:hover {\n  opacity: 1;\n}\n\n.api-key-container {\n  display: flex;\n  gap: 0.5rem;\n  align-items: stretch;\n}\n\n.api-key-container input {\n  flex: 1;\n}\n\n.test-btn {\n  background: #f3f4f6;\n  border: 1.5px solid #e5e7eb;\n  border-radius: 8px;\n  padding: 0.75rem;\n  cursor: pointer;\n  font-size: 1rem;\n  transition: all 0.2s ease;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-width: 44px;\n}\n\n.test-btn:hover:not(:disabled) {\n  background: #e5e7eb;\n  border-color: #d1d5db;\n}\n\n.test-btn:disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n\n.spinner-small {\n  width: 12px;\n  height: 12px;\n  border: 2px solid rgba(0, 0, 0, 0.1);\n  border-top: 2px solid #6366f1;\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n}\n\n.test-result {\n  margin-top: 0.5rem;\n  padding: 0.5rem;\n  border-radius: 6px;\n  font-size: 0.85rem;\n  font-weight: 500;\n}\n\n.test-result.success {\n  background: #d1fae5;\n  color: #065f46;\n  border: 1px solid #a7f3d0;\n}\n\n.test-result.error {\n  background: #fee2e2;\n  color: #991b1b;\n  border: 1px solid #fca5a5;\n}\n\n  @media (max-width: 1024px) {\n    .container {\n      grid-template-columns: 1fr;\n      gap: 2rem;\n      padding: 1rem;\n    }\n  }\n\n  @media (max-width: 640px) {\n    .form-section, .output-section {\n      padding: 1.5rem;\n    }\n    \n    h1 {\n      font-size: 1.5rem;\n    }\n    \n    h2 {\n      font-size: 1.25rem;\n    }\n\n    .config-actions {\n      flex-direction: column;\n    }\n  }","html":"<main class=\"container\">\n  <div class=\"form-section\">\n    <div class=\"header\">\n      <div class=\"icon\">✨</div>\n      <h1>AI Prompt Generator</h1>\n      <button class=\"config-btn\" on:click={() => showApiConfig = !showApiConfig}>\n        ⚙️\n      </button>\n    </div>\n\n    {#if showApiConfig}\n      <div class=\"api-config\">\n        <h3>API Configuration</h3>\n        \n        <div class=\"form-group\">\n          <label for=\"apiProvider\">AI Provider</label>\n          <select id=\"apiProvider\" bind:value={apiProvider}>\n            {#each Object.entries(apiProviders) as [key, provider]}\n              <option value={key}>{provider.name}</option>\n            {/each}\n          </select>\n        </div>\n\n        <div class=\"form-group\">\n          <label for=\"apiModel\">Model</label>\n          <select id=\"apiModel\" bind:value={apiModel}>\n            {#each availableModels as model}\n              <option value={model}>{model}</option>\n            {/each}\n          </select>\n        </div>\n\n        <div class=\"form-group\">\n  <label for=\"apiKey\">\n    API Key\n    <a \n      href={apiLinks[apiProvider]} \n      target=\"_blank\" \n      rel=\"noopener noreferrer\"\n      class=\"api-link\"\n      title=\"Get API key\"\n    >\n      🔗\n    </a>\n  </label>\n  <div class=\"api-key-container\">\n    <input \n      id=\"apiKey\"\n      type=\"password\" \n      bind:value={apiKey}\n      placeholder=\"Enter your API key...\"\n    />\n    <button \n      class=\"test-btn\"\n      on:click={testAPIConnection}\n      disabled={isTestingAPI || !apiKey}\n      title=\"Test API connection\"\n    >\n      {#if isTestingAPI}\n        <span class=\"spinner-small\"></span>\n      {:else}\n        🧪\n      {/if}\n    </button>\n  </div>\n  <small class=\"help-text\">Your API key is stored locally and never sent to our servers.</small>\n  {#if testResult}\n    <div class=\"test-result\" class:success={testResult.includes('✅')} class:error={testResult.includes('❌')}>\n      {testResult}\n    </div>\n  {/if}\n</div>\n\n        <div class=\"config-actions\">\n          <button class=\"save-config-btn\" on:click={saveConfig}>Save Configuration</button>\n          <button class=\"cancel-btn\" on:click={() => showApiConfig = false}>Cancel</button>\n        </div>\n      </div>\n    {/if}\n\n    <div class=\"form-group\">\n      <label for=\"category\">1. Select Category</label>\n      <select id=\"category\" bind:value={selectedCategory}>\n        <option value=\"\">Choose a category...</option>\n        {#each Object.keys(categories) as category}\n          <option value={category}>{category}</option>\n        {/each}\n      </select>\n    </div>\n\n    <div class=\"form-group\">\n      <label for=\"objective\">2. What is your main objective?</label>\n      <input \n        id=\"objective\"\n        type=\"text\" \n        bind:value={mainObjective}\n        placeholder={selectedCategory ? categories[selectedCategory].objectivePlaceholder : 'e.g., Write a product description for a new smartwatch'}\n      />\n    </div>\n\n    <div class=\"form-group\">\n      <label for=\"audience\">3. Target audience or context</label>\n      <input \n        id=\"audience\"\n        type=\"text\" \n        bind:value={targetAudience}\n        placeholder={selectedCategory ? categories[selectedCategory].audiencePlaceholder : 'e.g., Tech-savvy consumers aged 25-40'}\n      />\n    </div>\n\n    <div class=\"form-group\">\n      <label for=\"tone\">4. Choose a tone</label>\n      <select id=\"tone\" bind:value={selectedTone}>\n        <option value=\"\">Select tone...</option>\n        {#each toneOptions as tone}\n          <option value={tone}>{tone}</option>\n        {/each}\n      </select>\n    </div>\n\n    <div class=\"form-group\">\n      <label for=\"requirements\">5. Specific requirements or constraints</label>\n      <textarea \n        id=\"requirements\"\n        bind:value={specificRequirements}\n        placeholder=\"e.g., Include key features, mention price range, highlight durability\"\n        rows=\"3\"\n      ></textarea>\n    </div>\n\n    <div class=\"form-group\">\n      <label for=\"format\">6. Preferred output format</label>\n      <input \n        id=\"format\"\n        type=\"text\" \n        bind:value={outputFormat}\n        placeholder=\"e.g., Bullet points, paragraph form, JSON structure\"\n      />\n    </div>\n\n    <button \n      class=\"generate-btn\" \n      on:click={generatePromptWithAI}\n      disabled={isGenerating || !apiKey}\n    >\n      {#if isGenerating}\n        <span class=\"spinner\"></span>\n        Generating...\n      {:else}\n        🤖 Generate AI Prompt\n      {/if}\n    </button>\n\n    {#if !apiKey}\n      <p class=\"api-warning\">⚠️ Please configure your API key to generate prompts</p>\n    {/if}\n  </div>\n\n  <div class=\"output-section\">\n    <h2>Generated AI Prompt</h2>\n    <div class=\"output-content\">\n      {#if generatedPrompt}\n        <div class=\"prompt-display\">\n          <div class=\"prompt-header\">\n            <span class=\"prompt-label\">Ready to use AI Prompt:</span>\n            <button class=\"copy-btn\" on:click={() => navigator.clipboard.writeText(generatedPrompt)}>\n              📋 Copy\n            </button>\n          </div>\n          <div class=\"prompt-text\">\n            {generatedPrompt}\n          </div>\n        </div>\n      {:else}\n        <div class=\"placeholder\">\n          <div class=\"placeholder-icon\">🤖</div>\n          <p>Configure your API settings and fill out the form to generate a custom AI prompt using real AI models.</p>\n        </div>\n      {/if}\n    </div>\n  </div>\n</main>"},"fields":[],"content":{"en":{}},"site":"192117ab-0bc1-43ad-8aac-51a7c10feb5e"},{"id":"e1ad5601-6ab1-445a-8300-5e2e1680b09a","name":"New Block","code":{"js":"","css":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;700&display=swap');\n\nbody {\n  margin: 0;\n  padding: 0;\n  font-family: 'Inter', sans-serif;\n  background: linear-gradient(135deg, #23243a 0%, #3a2b47 100%);\n  min-height: 100vh;\n}\n\n.dashboard {\n  display: flex;\n  height: 100vh;\n}\n\n.sidebar {\n  width: 230px;\n  padding: 32px 0 0 0;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  background: rgba(30, 32, 48, 0.6);\n  border-right: 1px solid rgba(255,255,255,0.08);\n  min-width: 200px;\n}\n\n.logo {\n  font-size: 2rem;\n  font-weight: bold;\n  color: #fff;\n  margin: 0 0 32px 32px;\n  letter-spacing: 2px;\n}\n\n.sidebar nav ul {\n  list-style: none;\n  padding: 0 0 0 32px;\n  margin: 0;\n  width: 100%;\n}\n\n.sidebar nav ul li {\n  color: #fff;\n  opacity: 0.8;\n  padding: 14px 0;\n  font-size: 1.08rem;\n  cursor: pointer;\n  transition: background 0.2s, opacity 0.2s;\n  border-radius: 8px;\n  padding-left: 16px;\n}\n\n.sidebar nav ul li.active,\n.sidebar nav ul li:hover {\n  background: rgba(255,255,255,0.10);\n  opacity: 1;\n}\n\n.main {\n  flex: 1;\n  padding: 40px 48px 32px 48px;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n  background: rgba(40, 45, 60, 0.35);\n}\n\n.header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.header h1 {\n  color: #fff;\n  font-size: 2rem;\n  margin: 0;\n}\n\n.search {\n  background: rgba(255,255,255,0.12);\n  border: none;\n  border-radius: 12px;\n  padding: 10px 18px;\n  color: #fff;\n  font-size: 1rem;\n  outline: none;\n  width: 220px;\n  margin-left: 24px;\n  transition: background 0.2s;\n}\n\n.search:focus {\n  background: rgba(255,255,255,0.20);\n}\n\n.activity {\n  margin: 32px 0 0 0;\n}\n\n.activity-item {\n  background: rgba(255,255,255,0.08);\n  border-radius: 10px;\n  padding: 18px 24px;\n  color: #fff;\n  font-size: 1.1rem;\n  margin-bottom: 8px;\n  box-shadow: 0 2px 8px rgba(0,0,0,0.03);\n}\n\n.resume, .movies {\n  margin-top: 32px;\n}\n\n.resume h2, .movies h2 {\n  color: #fff;\n  font-size: 1.3rem;\n  margin-bottom: 18px;\n}\n\n.media-row {\n  display: flex;\n  gap: 22px;\n}\n\n.media-card {\n  background: rgba(255,255,255,0.10);\n  border-radius: 16px;\n  overflow: hidden;\n  box-shadow: 0 2px 8px rgba(0,0,0,0.07);\n  width: 140px;\n  height: 210px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.media-card img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  border-radius: 16px;\n}\n\n/* Glassmorphism effect */\n.glass {\n  backdrop-filter: blur(18px) saturate(160%);\n  -webkit-backdrop-filter: blur(18px) saturate(160%);\n  background: rgba(30, 32, 48, 0.35);\n  box-shadow: 0 4px 32px rgba(0,0,0,0.12);\n  border-radius: 16px;\n}","html":"  <div class=\"dashboard\">\n    <aside class=\"sidebar glass\">\n      <div class=\"logo\">Jellyfin</div>\n      <nav>\n        <ul>\n          <li class=\"active\">Dashboard</li>\n          <li>Libraries</li>\n          <li>Users</li>\n          <li>Plugins</li>\n          <li>Playback</li>\n          <li>Live TV & DVR</li>\n          <li>Settings</li>\n        </ul>\n      </nav>\n    </aside>\n    <main class=\"main glass\">\n      <header class=\"header\">\n        <h1>Activity</h1>\n        <input type=\"text\" class=\"search\" placeholder=\"Search\">\n      </header>\n      <section class=\"activity\">\n        <div class=\"activity-item\">\n          <strong>The Matrix</strong>\n        </div>\n      </section>\n      <section class=\"resume\">\n        <h2>Resume Playback</h2>\n        <div class=\"media-row\">\n          <div class=\"media-card\">\n            <img src=\"https://dummyimage.com/200x300/222/fff&text=STYAN+WORD\" alt=\"Resume Playback\">\n          </div>\n        </div>\n      </section>\n      <section class=\"movies\">\n        <h2>Movies</h2>\n        <div class=\"media-row\">\n          <div class=\"media-card\"><img src=\"https://dummyimage.com/200x300/abc/fff&text=Movie+1\" alt=\"Movie 1\"></div>\n          <div class=\"media-card\"><img src=\"https://dummyimage.com/200x300/222/ff6600&text=INCEPTION\" alt=\"Inception\"></div>\n          <div class=\"media-card\"><img src=\"https://dummyimage.com/200x300/333/fff&text=HATHER\" alt=\"Hather\"></div>\n          <div class=\"media-card\"><img src=\"https://dummyimage.com/200x300/ff6600/fff&text=Movie+4\" alt=\"Movie 4\"></div>\n        </div>\n      </section>\n    </main>\n  </div>"},"fields":[],"content":{"en":{}},"site":"192117ab-0bc1-43ad-8aac-51a7c10feb5e"},{"id":"4366e411-c8b9-4858-9655-843b722f55e1","name":"youtube-player","code":{"js":"import { onMount, onDestroy } from 'svelte';\n  \n  // Reactive state variables\n  let player;\n  let supabase;\n  let isPlayerReady = false;\n  let isPlaying = false;\n  let currentTime = 0;\n  let duration = 0;\n  let volume = 60;\n  let searchQuery = '';\n  let youtubeApiKey = '';\n  let playlist = [];\n  let searchResults = [];\n  let currentVideoId = '';\n  let currentTrackIndex = -1;\n  let currentTrackInfo = null;\n  let thumbnailUrl = '';\n  let displayedResults = 5;\n  let showApiKeyInput = false;\n  \n  // DOM element references\n  let progressBar;\n  let progressFill;\n  let volumeTrack;\n  let volumeFill;\n  let previousVolume = null;\n\n\n  function toggleMute() {\n  if (volume === 0) {\n    // If currently muted, restore to previous volume or default to 50%\n    setVolume(previousVolume || 50);\n  } else {\n    // Store current volume before muting\n    previousVolume = volume;\n    setVolume(0);\n  }\n}\n  // Load saved data on mount\n  onMount(async () => {\n\n  \ntry {\n  // Make sure the script is loaded first\n  if (!window.supabase) {\n    debug('Supabase not found in window object');\n    error = 'Supabase client not loaded. Please add the script tag to your HTML.';\n    return;\n  }\n  \n  const { createClient } = window.supabase;\n  supabase = createClient('YOUR_SUPABASE_URL', 'YOUR_SUPABASE_ANON_KEY');\n  debug('Supabase client initialized');\n  \n  // Check for existing session\n  const { data: { session }, error: sessionError } = await supabase.auth.getSession();\n  \n  if (sessionError) {\n    debug('Session error', sessionError);\n    error = sessionError.message;\n  } else if (session) {\n    user = session.user;\n    debug('User logged in', user.email);\n    \n    // Load API key\n    await loadApiKey();\n    \n    // Load user playlists\n    await loadUserPlaylists();\n  }\n} catch (e) {\n  debug('Supabase initialization error', e);\n  error = e.message;\n}\n    \n    // Load saved API key\n    const savedApiKey = localStorage.getItem('youtubeApiKey');\n    if (savedApiKey) {\n      youtubeApiKey = savedApiKey;\n    }\n    \n    // Load saved playlist\n    const savedPlaylist = localStorage.getItem('currentPlaylist');\n    if (savedPlaylist) {\n      try {\n        playlist = JSON.parse(savedPlaylist);\n      } catch (e) {\n        console.error('Error loading saved playlist:', e);\n      }\n    }\n    \n    // Load YouTube API\n    loadYouTubeAPI();\n    \n    // Set up interval for time updates\n    const timeUpdateInterval = setInterval(() => {\n      if (isPlaying && player && player.getCurrentTime && player.getDuration) {\n        currentTime = player.getCurrentTime();\n        duration = player.getDuration();\n      }\n    }, 1000);\n    \n    // Cleanup on destroy\n    return () => {\n      clearInterval(timeUpdateInterval);\n    };\n  });\n  \n  // Load YouTube API\n  async function loadYouTubeAPI() {\n    return new Promise((resolve, reject) => {\n      // Check if API is already loaded\n      if (window.YT && window.YT.Player) {\n        initializePlayer();\n        resolve();\n        return;\n      }\n      \n      // Create hidden player container if it doesn't exist\n      if (!document.getElementById('youtube-player')) {\n        const playerDiv = document.createElement('div');\n        playerDiv.id = 'youtube-player';\n        playerDiv.style.position = 'absolute';\n        playerDiv.style.top = '-9999px';\n        playerDiv.style.left = '-9999px';\n        document.body.appendChild(playerDiv);\n      }\n      \n      // Load the API\n      window.onYouTubeIframeAPIReady = () => {\n        initializePlayer();\n        resolve();\n      };\n      \n      const tag = document.createElement('script');\n      tag.src = 'https://www.youtube.com/iframe_api';\n      tag.onerror = () => {\n        reject(new Error('Failed to load YouTube API'));\n      };\n      \n      const firstScriptTag = document.getElementsByTagName('script')[0];\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n    });\n  }\n  \n  // Initialize YouTube Player\n  function initializePlayer() {\n    console.log('Initializing YouTube player');\n    try {\n      player = new YT.Player('youtube-player', {\n        height: '0',\n        width: '0',\n        videoId: '',\n        playerVars: {\n          'playsinline': 1,\n          'controls': 0,\n          'disablekb': 1,\n          'rel': 0\n        },\n        events: {\n          'onReady': onPlayerReady,\n          'onStateChange': onPlayerStateChange,\n          'onError': onPlayerError\n        }\n      });\n    } catch (error) {\n      console.error('Error initializing YouTube player:', error);\n    }\n  }\n  \n  // Player Ready Event Handler\n  function onPlayerReady(event) {\n    console.log('YouTube player is ready');\n    isPlayerReady = true;\n    setVolume(volume);\n    \n    // Set up media session controls for modern browsers\n    if ('mediaSession' in navigator) {\n      navigator.mediaSession.setActionHandler('play', togglePlay);\n      navigator.mediaSession.setActionHandler('pause', togglePlay);\n      navigator.mediaSession.setActionHandler('nexttrack', playNextTrack);\n      navigator.mediaSession.setActionHandler('previoustrack', playPreviousTrack);\n    }\n  }\n  \n  // Player State Change Event Handler\n  function onPlayerStateChange(event) {\n    if (event.data === YT.PlayerState.PLAYING) {\n      isPlaying = true;\n      if ('mediaSession' in navigator) {\n        navigator.mediaSession.playbackState = 'playing';\n      }\n    } else if (event.data === YT.PlayerState.PAUSED) {\n      isPlaying = false;\n      if ('mediaSession' in navigator) {\n        navigator.mediaSession.playbackState = 'paused';\n      }\n    } else if (event.data === YT.PlayerState.ENDED) {\n      playNextTrack();\n    }\n  }\n  \n  // Player Error Event Handler\n  function onPlayerError(event) {\n    console.error('YouTube player error:', event.data);\n    isPlaying = false;\n    \n    // Try to recover by playing next track if possible\n    if (playlist.length > 0 && currentTrackIndex >= 0) {\n      playNextTrack();\n    }\n  }\n  \n  // Toggle Play/Pause\n  function togglePlay() {\n    if (!isPlayerReady) {\n      console.warn('Player not ready yet. Please wait...');\n      return;\n    }\n    \n    if (isPlaying) {\n      player.pauseVideo();\n    } else if (currentVideoId) {\n      player.playVideo();\n    } else if (playlist.length > 0) {\n      playVideo(playlist[0].videoId);\n    }\n  }\n  \n  // Play Video with ID\n  async function playVideo(videoId) {\n    if (!isPlayerReady) {\n      console.warn('Player not ready yet. Please wait...');\n      return;\n    }\n    \n    try {\n      await player.loadVideoById(videoId);\n      currentVideoId = videoId;\n      currentTrackIndex = playlist.findIndex(track => track.videoId === videoId);\n      \n      // Find track info\n      currentTrackInfo = playlist.find(track => track.videoId === videoId) || \n                        searchResults.find(result => result.videoId === videoId) || \n                        null;\n      \n      if (currentTrackInfo) {\n        thumbnailUrl = `https://img.youtube.com/vi/${videoId}/hqdefault.jpg`;\n        \n        // Update media session metadata\n        if ('mediaSession' in navigator) {\n          navigator.mediaSession.metadata = new MediaMetadata({\n            title: currentTrackInfo.title || 'Unknown',\n            artist: currentTrackInfo.artist || 'Unknown',\n            artwork: [\n              {\n                src: thumbnailUrl,\n                sizes: '480x360',\n                type: 'image/jpeg'\n              }\n            ]\n          });\n        }\n      }\n      \n      isPlaying = true;\n    } catch (error) {\n      console.error('Error loading video:', error);\n    }\n  }\n  \n  // Play Next Track\n  function playNextTrack() {\n    if (playlist.length === 0) return;\n    \n    const nextIndex = (currentTrackIndex + 1) % playlist.length;\n    playVideo(playlist[nextIndex].videoId);\n  }\n  \n  // Play Previous Track\n  function playPreviousTrack() {\n    if (playlist.length === 0) return;\n    \n    const prevIndex = currentTrackIndex <= 0 ? playlist.length - 1 : currentTrackIndex - 1;\n    playVideo(playlist[prevIndex].videoId);\n  }\n  \n  // Set Volume\n  function setVolume(value) {\n    volume = Math.max(0, Math.min(100, value));\n    if (player && isPlayerReady) {\n      player.setVolume(volume);\n    }\n  }\n  \n  // Handle Progress Bar Click\n  function handleProgressBarClick(event) {\n    if (!isPlayerReady || !duration) return;\n    \n    const rect = progressBar.getBoundingClientRect();\n    const clickPosition = (event.clientX - rect.left) / rect.width;\n    const newTime = clickPosition * duration;\n    \n    player.seekTo(newTime, true);\n    currentTime = newTime;\n  }\n  \n  // Handle Volume Click\n  function handleVolumeClick(event) {\n    const rect = volumeTrack.getBoundingClientRect();\n    const clickPosition = (event.clientX - rect.left) / rect.width;\n    const newVolume = Math.round(clickPosition * 100);\n    \n    setVolume(newVolume);\n  }\n  \n  // Format Time (mm:ss)\n  function formatTime(seconds) {\n    if (!seconds) return '0:00';\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = Math.floor(seconds % 60);\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n  }\n  \n  // Search YouTube\n  async function searchYouTube() {\n    if (!youtubeApiKey) {\n      alert('Please enter a YouTube API key first');\n      showApiKeyInput = true;\n      return;\n    }\n    \n    if (!searchQuery.trim()) {\n      alert('Please enter a search query');\n      return;\n    }\n    \n    try {\n      const response = await fetch(\n        `https://www.googleapis.com/youtube/v3/search?part=snippet&q=${encodeURIComponent(\n          searchQuery\n        )}&type=video&key=${youtubeApiKey}&maxResults=25`\n      );\n      \n      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n      \n      const data = await response.json();\n      searchResults = data.items.map(item => ({\n        title: item.snippet.title,\n        artist: item.snippet.channelTitle,\n        videoId: item.id.videoId,\n        thumbnail: item.snippet.thumbnails.default.url\n      }));\n      \n      // Show search results modal\n      showSearchResultsModal();\n    } catch (error) {\n      console.error('Error fetching YouTube data:', error);\n      alert('An error occurred while searching. Please try again.');\n      searchResults = [];\n    }\n  }\n  \n  // Show Search Results Modal\n  function showSearchResultsModal() {\n    // Create modal if it doesn't exist\n    let searchModal = document.getElementById('search-results-modal');\n    if (!searchModal) {\n      searchModal = document.createElement('div');\n      searchModal.id = 'search-results-modal';\n      searchModal.className = 'modal';\n      document.body.appendChild(searchModal);\n    }\n    \n    // Populate modal\n    searchModal.innerHTML = `\n      <div class=\"modal-content\">\n        <button class=\"modal-close\">×</button>\n        <h2>Search Results</h2>\n        <div class=\"search-results\">\n          ${searchResults.slice(0, displayedResults).map((result, index) => `\n            <div class=\"search-result-item\">\n              <div class=\"result-thumbnail\">\n                <img src=\"${result.thumbnail}\" alt=\"${result.title}\">\n              </div>\n              <div class=\"result-info\">\n                <div class=\"result-title\">${result.title}</div>\n                <div class=\"result-artist\">${result.artist}</div>\n              </div>\n              <div class=\"result-actions\">\n                <button class=\"result-play\" data-index=\"${index}\">\n                  <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                    <path d=\"M8 5V19L19 12L8 5Z\"/>\n                  </svg>\n                </button>\n                <button class=\"result-add\" data-index=\"${index}\">\n                  <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                    <path d=\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"/>\n                  </svg>\n                </button>\n              </div>\n            </div>\n          `).join('')}\n        </div>\n        ${searchResults.length > displayedResults ? \n          `<button class=\"load-more-btn\">Load More</button>` : ''}\n      </div>\n    `;\n    \n    // Show modal\n    searchModal.style.display = 'flex';\n    \n    // Add event listeners\n    const closeBtn = searchModal.querySelector('.modal-close');\n    closeBtn.addEventListener('click', () => {\n      searchModal.style.display = 'none';\n    });\n    \n    const playBtns = searchModal.querySelectorAll('.result-play');\n    playBtns.forEach(btn => {\n      btn.addEventListener('click', () => {\n        const index = parseInt(btn.dataset.index);\n        playVideo(searchResults[index].videoId);\n        searchModal.style.display = 'none';\n      });\n    });\n    \n    const addBtns = searchModal.querySelectorAll('.result-add');\n    addBtns.forEach(btn => {\n      btn.addEventListener('click', () => {\n        const index = parseInt(btn.dataset.index);\n        addToPlaylist(searchResults[index]);\n      });\n    });\n    \n    const loadMoreBtn = searchModal.querySelector('.load-more-btn');\n    if (loadMoreBtn) {\n      loadMoreBtn.addEventListener('click', () => {\n        displayedResults += 5;\n        showSearchResultsModal();\n      });\n    }\n  }\n  \n  // Add to Playlist\n  function addToPlaylist(track) {\n    playlist = [...playlist, track];\n    \n    // Save to localStorage\n    localStorage.setItem('currentPlaylist', JSON.stringify(playlist));\n  }\n  \n  // Remove from Playlist\n  function removeFromPlaylist(index) {\n    const wasPlaying = currentTrackIndex === index && isPlaying;\n    \n    playlist = playlist.filter((_, i) => i !== index);\n    localStorage.setItem('currentPlaylist', JSON.stringify(playlist));\n    \n    if (index === currentTrackIndex) {\n      if (playlist.length > 0) {\n        const newIndex = Math.min(index, playlist.length - 1);\n        currentTrackIndex = newIndex;\n        playVideo(playlist[newIndex].videoId);\n      } else {\n        stopPlayback();\n      }\n    } else if (index < currentTrackIndex) {\n      currentTrackIndex--;\n    }\n  }\n  \n  // Stop Playback\n  function stopPlayback() {\n    if (player && isPlayerReady) {\n      player.stopVideo();\n    }\n    \n    currentTrackIndex = -1;\n    currentVideoId = '';\n    isPlaying = false;\n    currentTrackInfo = null;\n    \n    if ('mediaSession' in navigator) {\n      navigator.mediaSession.metadata = null;\n    }\n  }\n  \n  // Toggle API Key Input\n  function toggleApiKeyInput() {\n    showApiKeyInput = !showApiKeyInput;\n  }\n  \n  // Save API Key\n  async function saveApiKey() {\n  if (!user) {\n    debug('Cannot save API key - user not logged in');\n    alert('Please sign in to save your API key');\n    return;\n  }\n  \n  if (!apiKey) {\n    debug('Empty API key - not saving');\n    alert('Please enter a valid API key');\n    return;\n  }\n  \n  try {\n    debug('Saving API key');\n    \n    // Check if the api_keys table exists\n    const { error: tableCheckError } = await supabase\n      .from('api_keys')\n      .select('count')\n      .limit(1);\n    \n    if (tableCheckError) {\n      debug('Table check error - table might not exist', tableCheckError);\n      alert('Database error: api_keys table might not exist. Please check your Supabase setup.');\n      return;\n    }\n    \n    const { data, error } = await supabase\n      .from('api_keys')\n      .upsert({\n        user_id: user.id,\n        youtube_api_key: apiKey,\n        updated_at: new Date().toISOString()\n      }, {\n        onConflict: 'user_id'\n      });\n    \n    if (error) {\n      debug('API key save error', error);\n      alert('Failed to save API key: ' + error.message);\n      return;\n    }\n    \n    debug('API key saved successfully');\n    apiKeyStored = true;\n    initYouTubeAPI();\n    alert('API key saved successfully!');\n  } catch (e) {\n    debug('API key save exception', e);\n    alert('Exception saving API key: ' + e.message);\n  }\n}\n  \n  // Search Lyrics\n  function searchLyrics() {\n    if (!currentTrackInfo) {\n      alert('Please play a track first');\n      return;\n    }\n    \n    // Create lyrics modal\n    let lyricsModal = document.getElementById('lyrics-modal');\n    if (!lyricsModal) {\n      lyricsModal = document.createElement('div');\n      lyricsModal.id = 'lyrics-modal';\n      lyricsModal.className = 'modal';\n      document.body.appendChild(lyricsModal);\n    }\n    \n    // Populate modal\n    lyricsModal.innerHTML = `\n      <div class=\"modal-content\">\n        <button class=\"modal-close\">×</button>\n        <h2>Search Lyrics</h2>\n        <div class=\"lyrics-search\">\n          <input type=\"text\" class=\"lyrics-search-input\" value=\"${currentTrackInfo.title} ${currentTrackInfo.artist}\" placeholder=\"Search for lyrics...\">\n          <button class=\"lyrics-search-btn\">Search</button>\n        </div>\n        <div class=\"lyrics-results\">\n          <p>Enter a search query to find lyrics</p>\n        </div>\n      </div>\n    `;\n    \n    // Show modal\n    lyricsModal.style.display = 'flex';\n    \n    // Add event listeners\n    const closeBtn = lyricsModal.querySelector('.modal-close');\n    closeBtn.addEventListener('click', () => {\n      lyricsModal.style.display = 'none';\n    });\n    \n    const searchBtn = lyricsModal.querySelector('.lyrics-search-btn');\n    const searchInput = lyricsModal.querySelector('.lyrics-search-input');\n    \n    searchBtn.addEventListener('click', () => {\n      const query = searchInput.value.trim();\n      if (query) {\n        fetchLyrics(query, lyricsModal);\n      }\n    });\n    \n    searchInput.addEventListener('keydown', (e) => {\n      if (e.key === 'Enter') {\n        const query = searchInput.value.trim();\n        if (query) {\n          fetchLyrics(query, lyricsModal);\n        }\n      }\n    });\n  }\n  \n  // Fetch Lyrics\n  async function fetchLyrics(query, modal) {\n    const resultsContainer = modal.querySelector('.lyrics-results');\n    resultsContainer.innerHTML = '<p>Searching for lyrics...</p>';\n    \n    try {\n      const response = await fetch(`https://api.lyrics.ovh/suggest/${encodeURIComponent(query)}`);\n      if (!response.ok) throw new Error('Failed to search lyrics');\n      \n      const data = await response.json();\n      if (data.data && data.data.length > 0) {\n        resultsContainer.innerHTML = `\n          <div class=\"lyrics-results-list\">\n            ${data.data.slice(0, 5).map((item, index) => `\n              <div class=\"lyrics-result-item\">\n                <div class=\"lyrics-result-info\">\n                  <div class=\"lyrics-result-title\">${item.title}</div>\n                  <div class=\"lyrics-result-artist\">${item.artist.name}</div>\n                </div>\n                <button class=\"get-lyrics-btn\" data-title=\"${item.title}\" data-artist=\"${item.artist.name}\">\n                  Get Lyrics\n                </button>\n              </div>\n            `).join('')}\n          </div>\n        `;\n        \n        // Add event listeners to get lyrics buttons\n        const getLyricsBtns = resultsContainer.querySelectorAll('.get-lyrics-btn');\n        getLyricsBtns.forEach(btn => {\n          btn.addEventListener('click', () => {\n            const title = btn.dataset.title;\n            const artist = btn.dataset.artist;\n            getLyrics(title, artist, modal);\n          });\n        });\n      } else {\n        resultsContainer.innerHTML = '<p>No results found</p>';\n      }\n    } catch (error) {\n      console.error('Error searching lyrics:', error);\n      resultsContainer.innerHTML = '<p>Error searching for lyrics. Please try again.</p>';\n    }\n  }\n  \n  // Get Lyrics\n  async function getLyrics(title, artist, modal) {\n    const resultsContainer = modal.querySelector('.lyrics-results');\n    resultsContainer.innerHTML = '<p>Loading lyrics...</p>';\n    \n    try {\n      const response = await fetch(\n        `https://api.lyrics.ovh/v1/${encodeURIComponent(artist)}/${encodeURIComponent(title)}`\n      );\n      \n      if (!response.ok) throw new Error('Lyrics not found');\n      \n      const data = await response.json();\n      if (data.lyrics) {\n        resultsContainer.innerHTML = `\n          <div class=\"lyrics-content\">\n            <h3>${title} - ${artist}</h3>\n            <pre>${data.lyrics}</pre>\n          </div>\n        `;\n      } else {\n        resultsContainer.innerHTML = '<p>Lyrics not available for this song</p>';\n      }\n    } catch (error) {\n      console.error('Error fetching lyrics:', error);\n      resultsContainer.innerHTML = '<p>Could not retrieve lyrics. Please try another song.</p>';\n    }\n  }\n  \n  // Save Playlist\n  function savePlaylist() {\n    if (playlist.length === 0) {\n      alert('Your playlist is empty. Add some tracks first!');\n      return;\n    }\n    \n    const playlistName = prompt('Enter a name for your playlist:');\n    if (!playlistName) return;\n    \n    try {\n      const savedPlaylists = JSON.parse(localStorage.getItem('savedPlaylists') || '{}');\n      savedPlaylists[playlistName] = playlist;\n      localStorage.setItem('savedPlaylists', JSON.stringify(savedPlaylists));\n      alert(`Playlist \"${playlistName}\" saved successfully!`);\n    } catch (error) {\n      console.error('Error saving playlist:', error);\n      alert('Failed to save playlist. Please try again.');\n    }\n  }\n  \n  // Handle keyboard accessibility\n  function handleKeyDown(event, action) {\n    if (event.key === 'Enter' || event.key === ' ') {\n      event.preventDefault();\n      action();\n    }\n  }","css":"/* Base Styles */\n  :global(*) {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n  }\n\n  :global(:root) {\n    --primary-bg: #1a1e2e;\n    --secondary-bg: #232741;\n    --accent-color: #7dd3fc;\n    --accent-hover: #38bdf8;\n    --text-primary: #ffffff;\n    --text-secondary: #94a3b8;\n    --card-bg: rgba(35, 39, 65, 0.8);\n    --border-radius: 16px;\n    --shadow: 0 8px 32px rgba(0, 0, 0, 0.3);\n  }\n\n  :global(body) {\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n    background: linear-gradient(135deg, #0f172a 0%, #1e293b 50%, #334155 100%);\n    color: var(--text-primary);\n    min-height: 100vh;\n    overflow-x: hidden;\n  }\n\n  /* App Container */\n  .app {\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n    background: linear-gradient(135deg, #0f172a 0%, #1e293b 50%, #334155 100%);\n    \n  }\n\n  /* Header */\n  .header {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding: 1rem 2rem;\n    background: rgba(26, 30, 46, 0.9);\n    backdrop-filter: blur(10px);\n    border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n  }\n\n  .logo {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n    font-size: 1.2rem;\n    font-weight: 600;\n  }\n\n  .logo-icon {\n    font-size: 1.5rem;\n  }\n\n  .search-container {\n    flex: 1;\n    max-width: 400px;\n    margin: 0 2rem;\n    position: relative;\n  }\n\n  .search-input {\n    width: 100%;\n    padding: 0.75rem 3rem 0.75rem 1rem;\n    background: rgba(255, 255, 255, 0.1);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n    border-radius: 8px;\n    color: var(--text-primary);\n    font-size: 0.9rem;\n    outline: none;\n    transition: all 0.3s ease;\n  }\n\n  .search-input::placeholder {\n    color: var(--text-secondary);\n  }\n\n  .search-input:focus {\n    border-color: var(--accent-color);\n    background: rgba(255, 255, 255, 0.15);\n  }\n\n  .search-btn {\n    position: absolute;\n    right: 8px;\n    top: 50%;\n    transform: translateY(-50%);\n    background: none;\n    border: none;\n    color: var(--text-secondary);\n    cursor: pointer;\n    padding: 4px;\n    border-radius: 4px;\n    transition: all 0.2s ease;\n  }\n\n  .search-btn:hover {\n    color: var(--accent-color);\n    background: rgba(125, 211, 252, 0.1);\n  }\n\n  .api-section {\n    position: relative;\n  }\n\n  .api-key-btn {\n    padding: 0.75rem 1.5rem;\n    background: var(--accent-color);\n    color: var(--primary-bg);\n    border: none;\n    border-radius: 8px;\n    font-weight: 500;\n    cursor: pointer;\n    transition: all 0.3s ease;\n  }\n\n  .api-key-btn:hover {\n    background: var(--accent-hover);\n    transform: translateY(-1px);\n  }\n\n  .api-input-container {\n    position: absolute;\n    top: 100%;\n    right: 0;\n    margin-top: 8px;\n    background: var(--card-bg);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n    border-radius: 8px;\n    padding: 1rem;\n    min-width: 280px;\n    display: flex;\n    gap: 0.5rem;\n    align-items: center;\n    backdrop-filter: blur(10px);\n    box-shadow: var(--shadow);\n    z-index: 10;\n  }\n\n  .api-input {\n    flex: 1;\n    padding: 0.5rem 0.75rem;\n    background: rgba(255, 255, 255, 0.1);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n    border-radius: 6px;\n    color: var(--text-primary);\n    font-size: 0.85rem;\n    outline: none;\n  }\n\n  .api-input::placeholder {\n    color: var(--text-secondary);\n  }\n\n  .api-save-btn {\n    padding: 0.5rem 1rem;\n    background: var(--accent-color);\n    color: var(--primary-bg);\n    border: none;\n    border-radius: 6px;\n    font-size: 0.85rem;\n    cursor: pointer;\n    transition: all 0.2s ease;\n  }\n\n  .api-save-btn:hover {\n    background: var(--accent-hover);\n  }\n\n  .api-cancel-btn {\n    width: 28px;\n    height: 28px;\n    background: rgba(255, 255, 255, 0.1);\n    border: none;\n    border-radius: 4px;\n    color: var(--text-secondary);\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    transition: all 0.2s ease;\n  }\n\n  .api-cancel-btn:hover {\n    background: rgba(255, 255, 255, 0.2);\n    color: var(--text-primary);\n  }\n\n  /* Main Content */\n  .main-content {\n    flex: 1;\n    display: grid;\n    grid-template-columns: 1fr 350px;\n    gap: 2rem;\n    padding: 2rem;\n    max-width: 1400px;\n    margin: 0 auto;\n    width: 100%;\n  }\n\n  /* Player Section */\n  .player-section {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    text-align: center;\n    gap: 2rem;\n  }\n\n  .album-artwork {\n    position: relative;\n  }\n\n  .artwork-container {\n    width: 280px;\n    height: 280px;\n    background: linear-gradient(135deg, #f3e8d2 0%, #e8d5b7 50%, #d4c2a8 100%);\n    border-radius: var(--border-radius);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    box-shadow: var(--shadow);\n    transition: transform 0.3s ease;\n  }\n\n  .artwork-container:hover {\n    transform: scale(1.05);\n  }\n\n  .artwork-image {\n    width: 120px;\n    height: 120px;\n    background: rgba(255, 255, 255, 0.9);\n    border-radius: 12px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.2);\n  }\n\n  .artwork-inner {\n    width: 80px;\n    height: 80px;\n    background: linear-gradient(135deg, #6b7280 0%, #4b5563 50%, #374151 100%);\n    border-radius: 8px;\n    position: relative;\n  }\n\n  .artwork-inner::before {\n    content: '';\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    width: 40px;\n    height: 40px;\n    background: linear-gradient(135deg, #8b9dc3 0%, #6b7fa3 100%);\n    border-radius: 50%;\n  }\n\n  .track-info {\n    margin: 1rem 0;\n  }\n\n  .track-title {\n    font-size: 2rem;\n    font-weight: 600;\n    margin-bottom: 0.5rem;\n  }\n\n  .artist-name {\n    font-size: 1.1rem;\n    color: var(--text-secondary);\n  }\n\n  /* Player Controls */\n  .player-controls {\n    display: flex;\n    align-items: center;\n    gap: 1.5rem;\n    margin: 1rem 0;\n  }\n\n  .control-btn {\n    background: none;\n    border: none;\n    color: var(--accent-color);\n    cursor: pointer;\n    padding: 0.75rem;\n    border-radius: 50%;\n    transition: all 0.3s ease;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n\n  .control-btn:hover {\n    background: rgba(125, 211, 252, 0.1);\n    transform: scale(1.1);\n  }\n\n  .control-btn:focus {\n    outline: 2px solid var(--accent-color);\n    outline-offset: 2px;\n  }\n\n  .play-btn {\n    background: var(--accent-color);\n    color: var(--primary-bg);\n    width: 64px;\n    height: 64px;\n  }\n\n  .play-btn:hover {\n    background: var(--accent-hover);\n    transform: scale(1.1);\n  }\n\n  /* Progress Bar */\n  .progress-container {\n    width: 100%;\n    max-width: 400px;\n    margin: 1rem 0;\n  }\n\n  .time-display {\n    display: flex;\n    justify-content: space-between;\n    margin-bottom: 0.5rem;\n    font-size: 0.8rem;\n    color: var(--text-secondary);\n  }\n\n  .progress-bar {\n    position: relative;\n    width: 100%;\n    height: 4px;\n    background: rgba(255, 255, 255, 0.1);\n    border-radius: 2px;\n    cursor: pointer;\n  }\n\n  .progress-bar:focus {\n    outline: none;\n    box-shadow: 0 0 0 2px var(--accent-color);\n  }\n\n  .progress-fill {\n    width: 35%;\n    height: 100%;\n    background: var(--accent-color);\n    border-radius: 2px;\n    position: relative;\n  }\n\n  .progress-handle {\n    position: absolute;\n    right: -6px;\n    top: 50%;\n    transform: translateY(-50%);\n    width: 12px;\n    height: 12px;\n    background: var(--accent-color);\n    border-radius: 50%;\n    cursor: pointer;\n    transition: all 0.2s ease;\n    opacity: 0;\n  }\n\n  .progress-bar:hover .progress-handle,\n  .progress-bar:focus .progress-handle {\n    opacity: 1;\n  }\n\n  /* Volume Control */\n  .volume-control {\n  display: flex;\n  align-items: center;\n  gap: 0.75rem;\n  margin: 1rem 0;\n}\n\n.volume-button {\n  background: none;\n  border: none;\n  color: var(--text-secondary);\n  cursor: pointer;\n  padding: 0.5rem;\n  border-radius: 50%;\n  transition: all 0.2s ease;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.volume-button:hover {\n  color: var(--accent-color);\n  background: rgba(125, 211, 252, 0.1);\n}\n\n.volume-slider-container {\n  display: flex;\n  flex-direction: column;\n  gap: 0.25rem;\n  width: 100px;\n}\n\n.volume-slider {\n  -webkit-appearance: none;\n  width: 100%;\n  height: 4px;\n  border-radius: 2px;\n  background: rgba(255, 255, 255, 0.1);\n  outline: none;\n}\n\n.volume-slider::-webkit-slider-thumb {\n  -webkit-appearance: none;\n  appearance: none;\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  background: var(--accent-color);\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.volume-slider::-moz-range-thumb {\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  background: var(--accent-color);\n  cursor: pointer;\n  border: none;\n  transition: all 0.2s ease;\n}\n\n.volume-slider::-webkit-slider-thumb:hover,\n.volume-slider::-moz-range-thumb:hover {\n  transform: scale(1.2);\n}\n\n.volume-indicator {\n  font-size: 0.7rem;\n  color: var(--text-secondary);\n  text-align: right;\n}\n\n  /* Action Buttons */\n  .action-buttons {\n    display: flex;\n    gap: 1rem;\n    margin-top: 1rem;\n  }\n\n  .action-btn {\n    padding: 0.75rem 1.5rem;\n    border: none;\n    border-radius: 8px;\n    font-weight: 500;\n    cursor: pointer;\n    transition: all 0.3s ease;\n  }\n\n  .action-btn:focus {\n    outline: 2px solid var(--accent-color);\n    outline-offset: 2px;\n  }\n\n  .action-btn.secondary {\n    background: rgba(255, 255, 255, 0.1);\n    color: var(--text-primary);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n  }\n\n  .action-btn.secondary:hover {\n    background: rgba(255, 255, 255, 0.2);\n  }\n\n  .action-btn.primary {\n    background: var(--accent-color);\n    color: var(--primary-bg);\n  }\n\n  .action-btn.primary:hover {\n    background: var(--accent-hover);\n    transform: translateY(-1px);\n  }\n\n  /* Playlist Section */\n  .playlist-section {\n    background: var(--card-bg);\n    border-radius: var(--border-radius);\n    padding: 1.5rem;\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n    height: fit-content;\n  }\n\n  .playlist-title {\n    font-size: 1.3rem;\n    font-weight: 600;\n    margin-bottom: 1.5rem;\n    color: var(--text-primary);\n  }\n\n  .playlist-items {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n  }\n\n  .playlist-item {\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n    padding: 0.75rem;\n    border-radius: 8px;\n    transition: all 0.3s ease;\n    cursor: pointer;\n  }\n\n  .playlist-item:hover {\n    background: rgba(255, 255, 255, 0.05);\n  }\n\n  .playlist-item:focus {\n    outline: 2px solid var(--accent-color);\n    outline-offset: 2px;\n    background: rgba(255, 255, 255, 0.05);\n  }\n\n  .playlist-item.active {\n    background: rgba(125, 211, 252, 0.2);\n  }\n\n  .playlist-artwork {\n    width: 48px;\n    height: 48px;\n    border-radius: 8px;\n    overflow: hidden;\n    flex-shrink: 0;\n  }\n\n  .artwork-thumb {\n    width: 100%;\n    height: 100%;\n    border-radius: 8px;\n  }\n\n  .playlist-info {\n    flex: 1;\n    text-align: left;\n  }\n\n  .playlist-track {\n    font-weight: 500;\n    color: var(--text-primary);\n    margin-bottom: 0.25rem;\n  }\n\n  .playlist-artist {\n    font-size: 0.85rem;\n    color: var(--text-secondary);\n  }\n\n  .remove-btn {\n    width: 24px;\n    height: 24px;\n    border-radius: 50%;\n    background: rgba(255, 255, 255, 0.1);\n    border: none;\n    color: var(--text-secondary);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n    font-size: 1.2rem;\n    transition: all 0.2s ease;\n  }\n\n  .remove-btn:hover {\n    background: rgba(255, 0, 0, 0.2);\n    color: #ff6b6b;\n  }\n\n  .remove-btn:focus {\n    outline: 2px solid var(--accent-color);\n    outline-offset: 2px;\n  }\n\n  .empty-playlist {\n    padding: 2rem 1rem;\n    text-align: center;\n    color: var(--text-secondary);\n    font-size: 0.9rem;\n    background: rgba(255, 255, 255, 0.05);\n    border-radius: 8px;\n  }\n\n  /* Modal Styles */\n  :global(.modal) {\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: rgba(0, 0, 0, 0.8);\n    display: none;\n    justify-content: center;\n    align-items: center;\n    z-index: 1000;\n    backdrop-filter: blur(10px);\n  }\n\n  :global(.modal-content) {\n    background: var(--card-bg);\n    border-radius: var(--border-radius);\n    padding: 2rem;\n    width: 90%;\n    max-width: 500px;\n    max-height: 80vh;\n    overflow-y: auto;\n    position: relative;\n    box-shadow: var(--shadow);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n  }\n\n  :global(.modal-close) {\n    position: absolute;\n    top: 1rem;\n    right: 1rem;\n    background: rgba(255, 255, 255, 0.1);\n    border: none;\n    color: var(--text-secondary);\n    width: 30px;\n    height: 30px;\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n    font-size: 1.2rem;\n    transition: all 0.2s ease;\n  }\n\n  :global(.modal-close:hover) {\n    background: rgba(255, 255, 255, 0.2);\n    color: var(--text-primary);\n  }\n\n  :global(.modal h2) {\n    font-size: 1.5rem;\n    margin-bottom: 1.5rem;\n    color: var(--text-primary);\n  }\n\n  /* Search Results */\n  :global(.search-results) {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n  }\n\n  :global(.search-result-item) {\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n    padding: 0.75rem;\n    background: rgba(255, 255, 255, 0.05);\n    border-radius: 8px;\n    transition: all 0.2s ease;\n  }\n\n  :global(.search-result-item:hover) {\n    background: rgba(255, 255, 255, 0.1);\n  }\n\n  :global(.result-thumbnail) {\n    width: 48px;\n    height: 48px;\n    border-radius: 6px;\n    overflow: hidden;\n    flex-shrink: 0;\n  }\n\n  :global(.result-thumbnail img) {\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n  }\n\n  :global(.result-info) {\n    flex: 1;\n    overflow: hidden;\n  }\n\n  :global(.result-title) {\n    font-weight: 500;\n    color: var(--text-primary);\n    margin-bottom: 0.25rem;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n\n  :global(.result-artist) {\n    font-size: 0.85rem;\n    color: var(--text-secondary);\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n\n  :global(.result-actions) {\n    display: flex;\n    gap: 0.5rem;\n  }\n\n  :global(.result-play), :global(.result-add) {\n    width: 32px;\n    height: 32px;\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n    transition: all 0.2s ease;\n    border: none;\n  }\n\n  :global(.result-play) {\n    background: var(--accent-color);\n    color: var(--primary-bg);\n  }\n\n  :global(.result-play:hover) {\n    background: var(--accent-hover);\n    transform: scale(1.1);\n  }\n\n  :global(.result-add) {\n    background: rgba(255, 255, 255, 0.1);\n    color: var(--text-primary);\n  }\n\n  :global(.result-add:hover) {\n    background: rgba(255, 255, 255, 0.2);\n    transform: scale(1.1);\n  }\n\n  :global(.load-more-btn) {\n    width: 100%;\n    padding: 0.75rem;\n    margin-top: 1rem;\n    background: rgba(255, 255, 255, 0.1);\n    color: var(--text-primary);\n    border: none;\n    border-radius: 8px;\n    cursor: pointer;\n    transition: all 0.2s ease;\n    font-weight: 500;\n  }\n\n  :global(.load-more-btn:hover) {\n    background: rgba(255, 255, 255, 0.2);\n  }\n\n  /* Lyrics Styles */\n  :global(.lyrics-search) {\n    display: flex;\n    gap: 0.5rem;\n    margin-bottom: 1.5rem;\n  }\n\n  :global(.lyrics-search-input) {\n    flex: 1;\n    padding: 0.75rem 1rem;\n    background: rgba(255, 255, 255, 0.1);\n    border: none;\n    border-radius: 8px;\n    color: var(--text-primary);\n    font-size: 0.9rem;\n  }\n\n  :global(.lyrics-search-input:focus) {\n    outline: none;\n    background: rgba(255, 255, 255, 0.15);\n  }\n\n  :global(.lyrics-search-btn) {\n    padding: 0.75rem 1.5rem;\n    background: var(--accent-color);\n    color: var(--primary-bg);\n    border: none;\n    border-radius: 8px;\n    cursor: pointer;\n    font-weight: 500;\n    transition: all 0.2s ease;\n  }\n\n  :global(.lyrics-search-btn:hover) {\n    background: var(--accent-hover);\n  }\n\n  /* Responsive Design */\n  @media (max-width: 1024px) {\n    .main-content {\n      grid-template-columns: 1fr;\n      gap: 2rem;\n    }\n    \n    .playlist-section {\n      order: -1;\n    }\n  }\n\n  @media (max-width: 768px) {\n    .header {\n      flex-direction: column;\n      gap: 1rem;\n      padding: 1rem;\n    }\n    \n    .search-container {\n      margin: 0;\n      max-width: none;\n    }\n    \n    .main-content {\n      padding: 1rem;\n    }\n    \n    .artwork-container {\n      width: 220px;\n      height: 220px;\n    }\n    \n    .player-controls {\n      gap: 1rem;\n    }\n    \n    .action-buttons {\n      flex-direction: column;\n      width: 100%;\n    }\n    \n    .volume-control {\n      flex-direction: column;\n      gap: 0.5rem;\n    }\n    \n    .volume-slider {\n      width: 120px;\n    }\n  }","html":"<div class=\"app\">\n  <!-- Header -->\n  <header class=\"header\">\n    <div class=\"logo\">\n      <span class=\"logo-icon\">🎵</span>\n      <span class=\"logo-text\">Harmony</span>\n    </div>\n    <div class=\"search-container\">\n      <input \n        type=\"text\" \n        placeholder=\"Search\" \n        class=\"search-input\"\n        bind:value={searchQuery}\n        on:keydown={(e) => e.key === 'Enter' && searchYouTube()}\n      >\n      <button class=\"search-btn\" on:click={searchYouTube}>\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n          <circle cx=\"11\" cy=\"11\" r=\"8\"></circle>\n          <path d=\"m21 21-4.35-4.35\"></path>\n        </svg>\n      </button>\n    </div>\n    <div class=\"api-section\">\n      {#if !showApiKeyInput}\n        <button class=\"api-key-btn\" on:click={toggleApiKeyInput}>\n          {youtubeApiKey ? 'Change API Key' : 'Add Your API Key'}\n        </button>\n      {:else}\n        <div class=\"api-input-container\">\n          <input \n            type=\"text\" \n            placeholder=\"Enter API Key\" \n            class=\"api-input\"\n            bind:value={youtubeApiKey}\n            on:keydown={(e) => e.key === 'Enter' && saveApiKey()}\n          >\n          <button class=\"api-save-btn\" on:click={saveApiKey}>Save</button>\n          <button class=\"api-cancel-btn\" on:click={toggleApiKeyInput}>×</button>\n        </div>\n      {/if}\n    </div>\n  </header>\n\n  <!-- Main Content -->\n  <main class=\"main-content\">\n    <!-- Player Section -->\n    <section class=\"player-section\">\n      <div class=\"album-artwork\">\n        <div class=\"artwork-container\">\n          <div class=\"artwork-image\">\n            <div \n              class=\"artwork-inner\" \n              style={thumbnailUrl ? `background-image: url(${thumbnailUrl}); background-size: cover; background-position: center;` : ''}\n            ></div>\n          </div>\n        </div>\n      </div>\n      \n      <div class=\"track-info\">\n        <h2 class=\"track-title\">{currentTrackInfo ? currentTrackInfo.title : 'Midnight Serenade'}</h2>\n        <p class=\"artist-name\">{currentTrackInfo ? currentTrackInfo.artist : 'Luna Beats'}</p>\n      </div>\n\n      <div class=\"player-controls\">\n        <button \n          class=\"control-btn\" \n          on:click={() => {/* Toggle shuffle */}}\n          on:keydown={(e) => handleKeyDown(e, () => {/* Toggle shuffle */})}\n          tabindex=\"0\"\n          aria-label=\"Shuffle\"\n        >\n          <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n            <path d=\"M14.83 13.41L13.42 14.82L16.55 17.95L14.5 20H20V14.5L17.96 16.54L14.83 13.41M14.5 4L16.54 6.04L4 18.59L5.41 20L17.96 7.46L20 9.5V4M10.59 9.17L5.41 4L4 5.41L9.17 10.58L10.59 9.17Z\"/>\n          </svg>\n        </button>\n        \n        <button \n          class=\"control-btn\" \n          on:click={playPreviousTrack}\n          on:keydown={(e) => handleKeyDown(e, playPreviousTrack)}\n          tabindex=\"0\"\n          aria-label=\"Previous track\"\n        >\n          <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n            <path d=\"M6 6H4V18H6V6M9.5 12L18 6V18L9.5 12Z\"/>\n          </svg>\n        </button>\n        \n        <button \n          class=\"control-btn play-btn\" \n          on:click={togglePlay}\n          on:keydown={(e) => handleKeyDown(e, togglePlay)}\n          tabindex=\"0\"\n          aria-label={isPlaying ? \"Pause\" : \"Play\"}\n        >\n          {#if isPlaying}\n            <svg width=\"28\" height=\"28\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n              <path d=\"M6 4h4v16H6V4zm8 0h4v16h-4V4z\"/>\n            </svg>\n          {:else}\n            <svg width=\"28\" height=\"28\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n              <path d=\"M8 5V19L19 12L8 5Z\"/>\n            </svg>\n          {/if}\n        </button>\n        \n        <button \n          class=\"control-btn\" \n          on:click={playNextTrack}\n          on:keydown={(e) => handleKeyDown(e, playNextTrack)}\n          tabindex=\"0\"\n          aria-label=\"Next track\"\n        >\n          <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n            <path d=\"M16 18H18V6H16V18M6 18L14.5 12L6 6V18Z\"/>\n          </svg>\n        </button>\n        \n        <button \n          class=\"control-btn\" \n          on:click={() => {/* Toggle repeat */}}\n          on:keydown={(e) => handleKeyDown(e, () => {/* Toggle repeat */})}\n          tabindex=\"0\"\n          aria-label=\"Repeat\"\n        >\n          <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n            <path d=\"M17 17H7V14L3 18L7 22V19H19V13H17M7 7H17V10L21 6L17 2V5H5V11H7V7Z\"/>\n          </svg>\n        </button>\n      </div>\n\n      <div class=\"progress-container\">\n        <div class=\"time-display\">\n          <span class=\"current-time\">{formatTime(currentTime)}</span>\n          <span class=\"total-time\">{formatTime(duration)}</span>\n        </div>\n        <div \n          class=\"progress-bar\" \n          bind:this={progressBar}\n          on:click={handleProgressBarClick}\n          tabindex=\"0\"\n          role=\"slider\"\n          aria-label=\"Playback position\"\n          aria-valuemin=\"0\"\n          aria-valuemax=\"100\"\n          aria-valuenow={duration ? (currentTime / duration) * 100 : 0}\n          on:keydown={(e) => {\n            if (e.key === 'ArrowRight') {\n              e.preventDefault();\n              player.seekTo(Math.min(currentTime + 5, duration), true);\n            } else if (e.key === 'ArrowLeft') {\n              e.preventDefault();\n              player.seekTo(Math.max(currentTime - 5, 0), true);\n            }\n          }}\n        >\n          <div \n            class=\"progress-fill\" \n            bind:this={progressFill}\n            style={`width: ${duration ? (currentTime / duration) * 100 : 0}%`}\n          ></div>\n          <div \n            class=\"progress-handle\"\n            style={`left: ${duration ? (currentTime / duration) * 100 : 0}%`}\n          ></div>\n        </div>\n      </div>\n\n      <div class=\"volume-control\">\n  <button \n    class=\"volume-button\" \n    on:click={toggleMute} \n    aria-label=\"Toggle mute\"\n  >\n    {#if volume === 0}\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\" class=\"volume-icon\">\n        <polygon points=\"11 5 6 9 2 9 2 15 6 15 11 19 11 5\"></polygon>\n        <line x1=\"23\" y1=\"9\" x2=\"17\" y2=\"15\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"></line>\n        <line x1=\"17\" y1=\"9\" x2=\"23\" y2=\"15\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"></line>\n      </svg>\n    {:else if volume < 50}\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\" class=\"volume-icon\">\n        <polygon points=\"11 5 6 9 2 9 2 15 6 15 11 19 11 5\"></polygon>\n        <path d=\"M15.54 8.46a5 5 0 0 1 0 7.07\"></path>\n      </svg>\n    {:else}\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\" class=\"volume-icon\">\n        <polygon points=\"11 5 6 9 2 9 2 15 6 15 11 19 11 5\"></polygon>\n        <path d=\"M19.07 4.93a10 10 0 0 1 0 14.14M15.54 8.46a5 5 0 0 1 0 7.07\"></path>\n      </svg>\n    {/if}\n  </button>\n  \n  <div class=\"volume-slider-container\">\n    <input\n      type=\"range\"\n      min=\"0\"\n      max=\"100\"\n      bind:value={volume}\n      on:input={() => setVolume(volume)}\n      class=\"volume-slider\"\n      aria-label=\"Volume control\"\n    />\n    <div class=\"volume-indicator\">{volume}%</div>\n  </div>\n</div>\n\n      <div class=\"action-buttons\">\n        <button \n          class=\"action-btn secondary\" \n          on:click={searchLyrics}\n          tabindex=\"0\"\n        >\n          Search Lyrics\n        </button>\n        <button \n          class=\"action-btn primary\" \n          on:click={savePlaylist}\n          tabindex=\"0\"\n        >\n          Save Playlist\n        </button>\n      </div>\n    </section>\n\n    <!-- Playlist Section -->\n    <aside class=\"playlist-section\">\n      <h3 class=\"playlist-title\">Playlist</h3>\n      <div class=\"playlist-items\">\n        {#each playlist as track, index}\n          <div \n            class=\"playlist-item {currentTrackIndex === index ? 'active' : ''}\" \n            on:click={() => playVideo(track.videoId)}\n            on:keydown={(e) => handleKeyDown(e, () => playVideo(track.videoId))}\n            tabindex=\"0\"\n            role=\"button\"\n            aria-label=\"Play {track.title}\"\n          >\n            <div class=\"playlist-artwork\">\n              <div \n                class=\"artwork-thumb\" \n                style={`background-image: url(https://img.youtube.com/vi/${track.videoId}/default.jpg); background-size: cover;`}\n              ></div>\n            </div>\n            <div class=\"playlist-info\">\n              <div class=\"playlist-track\">{track.title}</div>\n              <div class=\"playlist-artist\">{track.artist}</div>\n            </div>\n            <button \n              class=\"remove-btn\" \n              on:click|stopPropagation={() => removeFromPlaylist(index)}\n              on:keydown|stopPropagation={(e) => handleKeyDown(e, () => removeFromPlaylist(index))}\n              tabindex=\"0\"\n              aria-label=\"Remove from playlist\"\n            >×</button>\n          </div>\n        {:else}\n          <!-- If playlist is empty -->\n          <div class=\"empty-playlist\">\n            <p>Your playlist is empty. Search for songs to add them here.</p>\n          </div>\n        {/each}\n      </div>\n    </aside>\n  </main>\n                         <div id=\"youtube-player\"></div>\n</div>"},"fields":[],"content":{"en":{}},"site":"192117ab-0bc1-43ad-8aac-51a7c10feb5e"},{"id":"f65b41be-d240-4726-972f-023cd8b2da19","name":"Music pLayer","code":{"js":"import { onMount } from 'svelte';\n  import {\n    Search,\n    X,\n    MoreVertical,\n    SkipBack,\n    SkipForward,\n    Play,\n    Pause,\n    Key,\n    Volume2,\n    Settings,\n    List,\n    Plus,\n    FileText,\n    Trash2,\n    VolumeX,\n    Volume1,\n  } from 'lucide-svelte';\n\n  // State variables\n  let player;\n  let currentTime = 0;\n  let duration = 0;\n  let isPlaying = false;\n  let searchQuery = '';\n  let showSearchModal = false;\n  let showApiKeyModal = false;\n  let searchResults = [];\n  let displayedResults = 5;\n  let playlist = [];\n  let currentVideoId = '';\n  let isSearching = false;\n  let youtubeApiKey = '';\n  let showPlaylist = false;\n  let volume = 50;\n  let isPlayerReady = false;\n  let currentTrackIndex = -1;\n  let currentTrackInfo = null;\n  let manualSearchQuery = { title: '', artist: '' };\n  let lyrics = null;\n  let errorMessage = null;\n  let lyricsSearchQuery = '';\n  let lyricsSearchResults = [];\n  let isSearchingLyrics = false;\n  let selectedLyrics = null;\n  let lyricsError = null;\n  let playerError = null;\n  let isInitializing = true;\n  let showVolumeSlider = false;\n  let showSettings = false;\n  let showVolume = true;\n  let showLyricsModal = false;\n  let showLyricsSearch = false;\n  let isPlaylistVisible = false;\n  let showLyrics = false;\n  let thumbnailUrl = defaultImage;\n\n  //Settings icon method\n  function toggleSettings() {\n    showSettings = !showSettings;\n  }\n\n  function toggleVolume() {\n    showVolume = !showVolume;\n  }\n\n  // Initialize YouTube Player\n  onMount(() => {\n    tryInitialize();\n  });\n\n  async function tryInitialize() {\n    let retries = 0;\n    const maxRetries = 3;\n\n    async function attemptInitialization() {\n      try {\n        await loadYouTubeAPI();\n        isInitializing = false;\n      } catch (error) {\n        console.error('Error loading YouTube API or initializing player:', error);\n        playerError =\n          'Failed to initialize YouTube player. Please check your internet connection or try again later.';\n\n        if (retries < maxRetries) {\n          retries++;\n          console.log(`Retrying initialization (attempt ${retries}/${maxRetries})...`);\n          setTimeout(attemptInitialization, 2000);\n        } else {\n          console.error('Max retries reached. Unable to initialize YouTube player.');\n          isInitializing = false;\n          playerError = 'Unable to initialize YouTube player after multiple attempts.';\n        }\n      }\n    }\n    await attemptInitialization();\n  }\n\n  // Load YouTube API\n  function loadYouTubeAPI() {\n    return new Promise((resolve, reject) => {\n      if (window.YT && window.YT.Player) {\n        initializePlayer();\n        resolve();\n      }\n\n      const tag = document.createElement('script');\n      tag.src = 'https://www.youtube.com/iframe_api';\n      tag.onload = () => {\n        window.onYouTubeIframeAPIReady = () => {\n          initializePlayer();\n          resolve();\n        };\n      };\n      tag.onerror = () => {\n        reject(new Error('Failed to load YouTube API'));\n      };\n      const firstScriptTag = document.getElementsByTagName('script')[0];\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n    });\n  }\n\n  // Initialize Player\n  function initializePlayer() {\n    console.log('Initializing YouTube player');\n    try {\n      player = new YT.Player('youtube-player', {\n        height: '0',\n        width: '0',\n        videoId: '',\n        events: {\n          onReady: (event) => {\n            console.log('YouTube player is ready');\n            isPlayerReady = true;\n            setVolume(volume);\n            isInitializing = false; // Clear isInitializing flag here!\n          },\n          onStateChange: onPlayerStateChange,\n          onError: onPlayerError,\n        },\n      });\n    } catch (error) {\n      console.error('Error initializing YouTube player:', error);\n    }\n  }\n\n  // Handle Player Ready\n  function onPlayerReady(event) {\n    console.log('YouTube player is ready');\n    isPlayerReady = true;\n    setVolume(volume);\n\n    if ('mediaSession' in navigator) {\n      navigator.mediaSession.setActionHandler('play', () => togglePlay());\n      navigator.mediaSession.setActionHandler('pause', () => togglePlay());\n      navigator.mediaSession.setActionHandler('nexttrack', () => playNextTrack());\n      navigator.mediaSession.setActionHandler('previoustrack', () => playPreviousTrack());\n    }\n  }\n\n  // Handle Player State Change\n  function onPlayerStateChange(event) {\n    if (event.data === YT.PlayerState.PLAYING) {\n      isPlaying = true;\n      if ('mediaSession' in navigator) {\n        navigator.mediaSession.playbackState = 'playing';\n      }\n      updateTimeInfo();\n    } else if (event.data === YT.PlayerState.PAUSED) {\n      isPlaying = false;\n      if ('mediaSession' in navigator) {\n        navigator.mediaSession.playbackState = 'paused';\n      }\n    } else if (event.data === YT.PlayerState.ENDED) {\n      playNextTrack();\n    }\n  }\n\n  function onPlayerError(event) {\n    console.log('YouTube player error:', event.data);\n    isPlaying = false;\n  }\n\n  function updateTimeInfo() {\n    if (player && player.getCurrentTime && player.getDuration) {\n      currentTime = player.getCurrentTime();\n      duration = player.getDuration();\n      if (isPlaying) {\n        setTimeout(updateTimeInfo, 1000);\n      }\n    }\n  }\n\n  async function searchYouTube() {\n    if (!youtubeApiKey) {\n      alert('Please enter a YouTube API key first');\n      showApiKeyModal = true;\n      return;\n    }\n    if (!searchQuery.trim()) {\n      alert('Please enter a search query');\n      return;\n    }\n    isSearching = true;\n    try {\n      const response = await fetch(\n        `https://www.googleapis.com/youtube/v3/search?part=snippet&q=${encodeURIComponent(\n          searchQuery\n        )}&type=video&key=${youtubeApiKey}&maxResults=25`\n      );\n      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n      const data = await response.json();\n      searchResults = data.items.map((item) => ({\n        title: item.snippet.title,\n        artist: item.snippet.channelTitle,\n        videoId: item.id.videoId,\n      }));\n    } catch (error) {\n      console.error('Error fetching YouTube data:', error);\n      alert('An error occurred while searching. Please try again.');\n      searchResults = [];\n    } finally {\n      isSearching = false;\n    }\n  }\n\n  function loadMore() {\n    displayedResults += 5;\n  }\n\n  function addToPlaylist(track) {\n    playlist = [...playlist, track];\n  }\n\n  function removeFromPlaylist(index) {\n    playlist = playlist.filter((_, i) => i !== index);\n\n    if (index === currentTrackIndex) {\n      if (playlist.length > 0) {\n        playVideo(playlist[0].videoId);\n      } else {\n        stopPlayback();\n      }\n    } else if (index < currentTrackIndex) {\n      currentTrackIndex--;\n    }\n  }\n\n  function stopPlayback() {\n    currentTrackIndex = -1;\n    currentVideoId = '';\n    isPlaying = false;\n    if (player && player.stopVideo) player.stopVideo();\n    currentTrackInfo = null;\n\n    if ('mediaSession' in navigator) {\n      navigator.mediaSession.metadata = null;\n    }\n  }\n\n  async function playVideo(videoId) {\n    if (isInitializing) {\n      console.log('YouTube player is still initializing. Please wait.');\n      return;\n    }\n    if (!isPlayerReady || !player || !player.loadVideoById) {\n      console.error('YouTube player is not fully initialized. Please wait.');\n      return;\n    }\n\n    try {\n      await player.loadVideoById(videoId);\n      currentVideoId = videoId;\n      currentTrackIndex = playlist.findIndex((track) => track.videoId === videoId);\n\n      currentTrackInfo =\n        playlist.find((track) => track.videoId === videoId) ||\n        searchResults.find((result) => result.videoId === videoId) ||\n        null;\n\n      if (currentTrackInfo) {\n        console.log('Current track info updated:', currentTrackInfo);\n        thumbnailUrl = `https://img.youtube.com/vi/${videoId}/hqdefault.jpg`;\n\n        if ('mediaSession' in navigator) {\n          navigator.mediaSession.metadata = new MediaMetadata({\n            title: currentTrackInfo.title || 'Unknown',\n            artist: currentTrackInfo.artist || 'Unknown',\n            artwork: [\n              {\n                src: thumbnailUrl,\n                sizes: '480x360',\n                type: 'image/jpeg',\n              },\n            ],\n          });\n        }\n      } else {\n        console.warn('Could not find track info for videoId:', videoId);\n      }\n\n      isPlaying = true;\n      updateTimeInfo(); // Start updating time info\n    } catch (error) {\n      console.error(`Error loading video: ${error.message}. Please try again.`);\n      isPlaying = false;\n    }\n  }\n\n  function togglePlay() {\n    if (!player) return;\n    if (isPlaying) {\n      player.pauseVideo();\n      isPlaying = false;\n    } else if (currentVideoId) {\n      player.playVideo();\n      isPlaying = true;\n    } else if (playlist.length > 0) {\n      playVideo(playlist[0].videoId);\n    }\n  }\n\n  function formatTime(seconds) {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = Math.floor(seconds % 60);\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n  }\n\n  let previousVolume = null;\n  function setVolume(value) {\n    volume = value;\n    if (player && player.setVolume) {\n      player.setVolume(volume);\n      \n      // Update media session if available\n      if ('mediaSession' in navigator) {\n        // Some browsers support volume control via media session\n        // This is just a placeholder as the actual implementation varies\n      }\n    }\n  }\n\n  function playNextTrack() {\n    if (playlist.length === 0) return;\n    let nextIndex = (currentTrackIndex + 1) % playlist.length;\n    playVideo(playlist[nextIndex].videoId);\n  }\n\n  function playPreviousTrack() {\n    if (playlist.length === 0) return;\n    let prevIndex = currentTrackIndex === 0 ? playlist.length - 1 : currentTrackIndex - 1;\n    playVideo(playlist[prevIndex].videoId);\n  }\n\n  function setApiKey() {\n    if (youtubeApiKey.trim()) {\n      showApiKeyModal = false;\n    } else {\n      alert('Please enter a valid API key');\n    }\n  }\n\n  function handleSearchClick() {\n    showSearchModal = true;\n  }\n\n  function handleApiKeyClick() {\n    showApiKeyModal = true;\n  }\n\n  async function searchLyrics() {\n    if (!lyricsSearchQuery.trim()) {\n      alert('Please enter a search query');\n      return;\n    }\n    isSearchingLyrics = true;\n    lyricsError = null;\n    lyricsSearchResults = [];\n    selectedLyrics = null;\n\n    try {\n      const response = await fetch(\n        `https://api.lyrics.ovh/suggest/${encodeURIComponent(lyricsSearchQuery)}`\n      );\n      if (!response.ok) throw new Error('Failed to search lyrics');\n      const data = await response.json();\n      lyricsSearchResults = data.data\n        .slice(0, 5)\n        .map((item) => ({\n          title: item.title,\n          artist: item.artist.name,\n          id: item.id,\n        }));\n    } catch (error) {\n      lyricsError = 'Failed to search for lyrics. Please try again.';\n    } finally {\n      isSearchingLyrics = false;\n    }\n  }\n\n  async function getLyrics(title, artist) {\n    lyricsError = null;\n    selectedLyrics = null;\n\n    try {\n      const response = await fetch(\n        `https://api.lyrics.ovh/v1/${encodeURIComponent(artist)}/${encodeURIComponent(title)}`\n      );\n      if (!response.ok) throw new Error('Lyrics not found');\n      const data = await response.json();\n      selectedLyrics = data.lyrics || 'Lyrics not available';\n      showLyricsModal = true;\n    } catch (error) {\n      lyricsError = 'Could not retrieve lyrics. Please try another song.';\n    }\n  }\n\n  function handleLyricsSearch() {\n    searchLyrics();\n  }\n\n  const closeModal = () => {\n    showLyricsModal = false;\n  }\n\n  const defaultImage = 'https://picsum.photos/id/237/300/300';\n\n  function handleLyricsClick() {\n    showLyricsSearch = !showLyricsSearch;\n  }\n\n  function handleSearchYouTubeClick() {\n    showSearchModal = true;\n  }\n\n  function handleApiKeyModalClick() {\n    showApiKeyModal = true;\n  }\n\n  function togglePlaylist() {\n    isPlaylistVisible = !isPlaylistVisible;\n  }\n\n  function toggleLyrics() {\n    showLyrics = !showLyrics;\n  }\n\n  function handleProgressKeydown(event) {\n  if (!player || !player.getDuration) return;\n  \n  // Handle keyboard navigation\n  if (event.key === 'ArrowLeft') {\n    const newTime = Math.max(0, currentTime - 5); // Back 5 seconds\n    player.seekTo(newTime, true);\n    currentTime = newTime;\n    event.preventDefault();\n  } else if (event.key === 'ArrowRight') {\n    const newTime = Math.min(duration, currentTime + 5); // Forward 5 seconds\n    player.seekTo(newTime, true);\n    currentTime = newTime;\n    event.preventDefault();\n  } else if (event.key === 'Enter' || event.key === ' ') {\n    // Toggle play/pause on Enter or Space\n    togglePlay();\n    event.preventDefault();\n  }\n}\n\n  function handleProgressBarClick(event) {\n  if (!player || !player.getDuration) return;\n  \n  const progressBar = event.currentTarget;\n  const rect = progressBar.getBoundingClientRect();\n  const clickPosition = (event.clientX - rect.left) / rect.width;\n  const newTime = clickPosition * duration;\n  \n  player.seekTo(newTime, true);\n  currentTime = newTime;\n}\n\nfunction toggleMute() {\n  if (volume === 0) {\n    // Restore to previous volume or default to 50\n    setVolume(previousVolume || 50);\n  } else {\n    // Store current volume and mute\n    previousVolume = volume;\n    setVolume(0);\n  }\n}\n  // Corrected: Prevent the modals from showing initially\n    // function handleSearchClick() {\n    //     showSearchModal = true;\n    // }\n\n    // function handleApiKeyClick() {\n    //     showApiKeyModal = true;\n    // }","css":"/* Color Palette - Updated */\n:root {\n  --primary-color: #1ed4bc; /* Mint green accent color */\n  --primary-hover: #19b8a3;\n  --background-color: #121212; /* Dark background */\n  --card-background: #1e1e1e; /* Slightly lighter than background */\n  --text-primary: #ffffff;\n  --text-secondary: #b3b3b3;\n  --border-radius: 12px;\n  --shadow: 0 8px 30px rgba(0, 0, 0, 0.2);\n}\n\n/* General Layout Updates */\n.player-container {\n  min-height: 100vh;\n  background: var(--background-color);\n  padding: 2rem;\n  display: flex;\n  flex-direction: column;\n  color: var(--text-primary);\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n}\n\n/* Header Section */\n.header-section {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 1rem 1.5rem;\n  margin-bottom: 2rem;\n}\n\n.header-content {\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.logo-title {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.logo {\n  font-size: 1.8rem;\n  color: var(--primary-color);\n}\n\n.header-content h1 {\n  font-size: 1.5rem;\n  font-weight: 600;\n  color: var(--text-primary);\n  margin: 0;\n}\n\n/* Search Bar */\n.search-input {\n  position: relative;\n  width: 300px;\n}\n\n.search-icon {\n  position: absolute;\n  left: 10px;\n  top: 50%;\n  transform: translateY(-50%);\n  color: var(--text-secondary);\n}\n\n.search-input input {\n  width: 100%;\n  padding: 0.75rem 1rem 0.75rem 2.5rem;\n  background-color: rgba(255, 255, 255, 0.1);\n  border: none;\n  border-radius: 20px;\n  color: var(--text-primary);\n  font-size: 0.9rem;\n}\n\n.search-input input:focus {\n  outline: none;\n  background-color: rgba(255, 255, 255, 0.15);\n}\n\n.search-input input::placeholder {\n  color: var(--text-secondary);\n}\n\n/* API Key Button */\n.add-api-key-btn {\n  background-color: var(--primary-color);\n  color: #121212;\n  font-weight: 600;\n  padding: 0.5rem 1rem;\n  border: none;\n  border-radius: 20px;\n  cursor: pointer;\n  transition: background-color 0.2s, transform 0.1s;\n}\n\n.add-api-key-btn:hover {\n  background-color: var(--primary-hover);\n}\n\n.add-api-key-btn:active {\n  transform: scale(0.98);\n}\n\n/* Player Layout */\n.player-layout {\n  display: flex;\n  gap: 2rem;\n  max-width: 1200px;\n  margin: 0 auto;\n}\n\n/* Album Art and Player */\n.player-section {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.album-art {\n  width: 300px;\n  height: 300px;\n  margin-bottom: 2rem;\n  border-radius: 12px;\n  overflow: hidden;\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);\n  transition: transform 0.3s ease;\n}\n\n.album-art:hover {\n  transform: scale(1.02);\n}\n\n.album-art img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n\n/* Track Info */\n.track-info {\n  text-align: center;\n  margin-bottom: 1.5rem;\n  width: 100%;\n  max-width: 400px;\n}\n\n.track-info .title {\n  font-size: 1.5rem;\n  font-weight: 600;\n  margin-bottom: 0.5rem;\n  color: var(--text-primary);\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.artist-album {\n  font-size: 1rem;\n  color: var(--text-secondary);\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n/* Progress Bar */\n.time-progress {\n  width: 100%;\n  max-width: 400px;\n  margin: 1rem 0;\n  position: relative;\n}\n\n.progress-container {\n  height: 4px;\n  background: rgba(255, 255, 255, 0.1);\n  border-radius: 2px;\n  margin: 0.5rem 0;\n  position: relative;\n  cursor: pointer;\n  transition: height 0.2s;\n}\n\n.progress-container:hover {\n  height: 6px;\n}\n\n.progress-container:hover .progress-bar {\n  background: var(--primary-hover);\n}\n\n.progress-bar {\n  height: 100%;\n  background: var(--primary-color);\n  border-radius: 2px;\n  transition: width 0.1s linear;\n}\n\n.time-display {\n  display: flex;\n  justify-content: space-between;\n  font-size: 0.8rem;\n  color: var(--text-secondary);\n  margin-top: 0.25rem;\n}\n\n/* Controls */\n.controls {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 2rem;\n  margin: 1.5rem 0;\n}\n\n.control-btn {\n  color: var(--text-primary);\n  background: none;\n  border: none;\n  cursor: pointer;\n  transition: transform 0.2s, color 0.2s;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.control-btn:hover {\n  transform: scale(1.1);\n  color: var(--primary-color);\n}\n\n.control-btn:active {\n  transform: scale(0.95);\n}\n\n.play-btn {\n  background-color: var(--primary-color);\n  color: #121212;\n  width: 60px;\n  height: 60px;\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  transition: background-color 0.2s, transform 0.2s;\n}\n\n.play-btn:hover {\n  background-color: var(--primary-hover);\n  transform: scale(1.05);\n}\n\n.play-btn:active {\n  transform: scale(0.98);\n}\n\n/* Volume Control */\n.volume-control {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  margin-top: 1rem;\n}\n\n.volume-button {\n  background: none;\n  border: none;\n  color: var(--text-secondary);\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.volume-slider {\n  -webkit-appearance: none;\n  width: 100px;\n  height: 4px;\n  border-radius: 2px;\n  background: rgba(255, 255, 255, 0.1);\n  outline: none;\n  transition: opacity 0.2s;\n}\n\n.volume-slider::-webkit-slider-thumb {\n  -webkit-appearance: none;\n  appearance: none;\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  background: var(--primary-color);\n  cursor: pointer;\n  transition: transform 0.1s;\n}\n\n.volume-slider::-webkit-slider-thumb:hover {\n  transform: scale(1.2);\n}\n\n.volume-slider::-moz-range-thumb {\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  background: var(--primary-color);\n  cursor: pointer;\n  border: none;\n  transition: transform 0.1s;\n}\n\n.volume-slider::-moz-range-thumb:hover {\n  transform: scale(1.2);\n}\n\n/* Playlist Section */\n.playlist-section {\n  width: 300px;\n  background: rgba(255, 255, 255, 0.05);\n  border-radius: var(--border-radius);\n  padding: 1.5rem;\n  height: fit-content;\n}\n\n.playlist-section h2 {\n  font-size: 1.2rem;\n  margin-bottom: 1rem;\n  color: var(--text-primary);\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.playlist-card {\n  max-height: 400px;\n  overflow-y: auto;\n  margin-bottom: 1rem;\n}\n\n.playlist-card::-webkit-scrollbar {\n  width: 6px;\n}\n\n.playlist-card::-webkit-scrollbar-track {\n  background: rgba(255, 255, 255, 0.05);\n  border-radius: 3px;\n}\n\n.playlist-card::-webkit-scrollbar-thumb {\n  background: rgba(255, 255, 255, 0.2);\n  border-radius: 3px;\n}\n\n.playlist-card::-webkit-scrollbar-thumb:hover {\n  background: rgba(255, 255, 255, 0.3);\n}\n\n.playlist-list {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n}\n\n.playlist-item {\n  padding: 0.75rem;\n  border-radius: 8px;\n  margin-bottom: 0.5rem;\n  transition: background-color 0.2s;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.playlist-item:hover {\n  background-color: rgba(255, 255, 255, 0.1);\n}\n\n.playlist-item.active {\n  background-color: rgba(30, 212, 188, 0.2);\n}\n\n.playlist-item-info {\n  flex: 1;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n}\n\n.playlist-item-title {\n  color: var(--text-primary);\n  font-weight: 500;\n  background: none;\n  border: none;\n  cursor: pointer;\n  padding: 0;\n  text-align: left;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  max-width: 100%;\n  font-size: 0.9rem;\n}\n\n.track-artist {\n  color: var(--text-secondary);\n  font-size: 0.8rem;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.remove-from-playlist {\n  background: none;\n  border: none;\n  cursor: pointer;\n  color: var(--text-secondary);\n  opacity: 0.6;\n  transition: opacity 0.2s, color 0.2s;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0.25rem;\n}\n\n.remove-from-playlist:hover {\n  opacity: 1;\n  color: #ff5555;\n}\n\n/* Add to playlist button */\n.add-to-playlist {\n  background-color: transparent;\n  border: 1px solid var(--primary-color);\n  color: var(--primary-color);\n  border-radius: 50%;\n  width: 36px;\n  height: 36px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  margin: 0 auto;\n  transition: background-color 0.2s, transform 0.1s;\n}\n\n.add-to-playlist:hover {\n  background-color: rgba(30, 212, 188, 0.1);\n  transform: scale(1.05);\n}\n\n.add-to-playlist:active {\n  transform: scale(0.95);\n}\n\n/* Bottom Action Buttons */\n.action-buttons {\n  display: flex;\n  justify-content: center;\n  gap: 1rem;\n  margin-top: 2rem;\n  width: 100%;\n  max-width: 400px;\n}\n\n.action-btn {\n  padding: 0.75rem 1.5rem;\n  border-radius: 20px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 0.2s, transform 0.1s;\n  flex: 1;\n  text-align: center;\n}\n\n.search-lyrics-btn {\n  background-color: rgba(255, 255, 255, 0.1);\n  color: var(--text-primary);\n  border: none;\n}\n\n.search-lyrics-btn:hover {\n  background-color: rgba(255, 255, 255, 0.15);\n}\n\n.save-playlist-btn {\n  background-color: var(--primary-color);\n  color: #121212;\n  border: none;\n}\n\n.save-playlist-btn:hover {\n  background-color: var(--primary-hover);\n}\n\n.action-btn:active {\n  transform: scale(0.98);\n}\n\n/* Volume indicator */\n.volume-indicator {\n  position: absolute;\n  right: 0;\n  bottom: -20px;\n  color: var(--text-secondary);\n  font-size: 0.8rem;\n}\n\n/* Modal Styling */\n.modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.8);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 1rem;\n  z-index: 1000;\n  backdrop-filter: blur(5px);\n}\n\n.modal-content {\n  background: var(--card-background);\n  border-radius: var(--border-radius);\n  padding: 2rem;\n  width: 90%;\n  max-width: 500px;\n  max-height: 90vh;\n  overflow-y: auto;\n  position: relative;\n  box-shadow: 0 15px 40px rgba(0, 0, 0, 0.3);\n}\n\n.modal-close {\n  position: absolute;\n  top: 1rem;\n  right: 1rem;\n  background: none;\n  border: none;\n  cursor: pointer;\n  color: var(--text-secondary);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: color 0.2s;\n}\n\n.modal-close:hover {\n  color: var(--text-primary);\n}\n\n.modal h2 {\n  font-size: 1.5rem;\n  margin-bottom: 1.5rem;\n  color: var(--text-primary);\n}\n\n.search-input,\n.api-key-input {\n  display: flex;\n  gap: 0.5rem;\n  margin-bottom: 1.5rem;\n}\n\n.search-input input,\n.api-key-input input {\n  flex: 1;\n  padding: 0.75rem 1rem;\n  background-color: rgba(255, 255, 255, 0.1);\n  border: none;\n  border-radius: 8px;\n  color: var(--text-primary);\n  font-size: 0.9rem;\n}\n\n.search-input input:focus,\n.api-key-input input:focus {\n  outline: none;\n  background-color: rgba(255, 255, 255, 0.15);\n}\n\n.search-input button,\n.api-key-input button {\n  padding: 0.75rem 1.5rem;\n  background: var(--primary-color);\n  color: #121212;\n  border: none;\n  border-radius: 8px;\n  cursor: pointer;\n  font-size: 0.9rem;\n  font-weight: 500;\n  transition: background-color 0.2s;\n}\n\n.search-input button:hover,\n.api-key-input button:hover {\n  background: var(--primary-hover);\n}\n\n/* Search Results */\n.search-results {\n  display: flex;\n  flex-direction: column;\n  gap: 0.75rem;\n  margin-top: 1rem;\n}\n\n.search-result-item {\n  background: rgba(255, 255, 255, 0.05);\n  border-radius: 8px;\n  padding: 0.75rem 1rem;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  transition: background-color 0.2s;\n}\n\n.search-result-item:hover {\n  background: rgba(255, 255, 255, 0.1);\n}\n\n.search-result-info {\n  flex: 1;\n  overflow: hidden;\n}\n\n.search-result-item span {\n  display: block;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  color: var(--text-primary);\n  font-weight: 500;\n  font-size: 0.9rem;\n}\n\n.search-result-item .artist {\n  font-size: 0.8rem;\n  color: var(--text-secondary);\n  margin-top: 0.25rem;\n}\n\n.search-result-actions {\n  display: flex;\n  gap: 0.5rem;\n}\n\n.load-more {\n  background: none;\n  border: 1px solid var(--primary-color);\n  color: var(--primary-color);\n  padding: 0.75rem;\n  border-radius: 8px;\n  cursor: pointer;\n  margin-top: 1rem;\n  width: 100%;\n  transition: background-color 0.2s;\n  font-weight: 500;\n}\n\n.load-more:hover {\n  background-color: rgba(30, 212, 188, 0.1);\n}\n\n/* Lyrics Section */\n.lyrics-section {\n  margin-top: 1rem;\n  width: 100%;\n  max-width: 400px;\n}\n\n.lyrics-toggle {\n  width: 100%;\n  padding: 0.75rem;\n  background-color: rgba(255, 255, 255, 0.1);\n  color: var(--text-primary);\n  border: none;\n  border-radius: var(--border-radius);\n  font-size: 1rem;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n\n.lyrics-toggle:hover {\n  background-color: rgba(255, 255, 255, 0.15);\n}\n\n.lyrics-content {\n  background-color: rgba(255, 255, 255, 0.05);\n  border-radius: var(--border-radius);\n  padding: 1.5rem;\n  margin-top: 1rem;\n  max-height: 300px;\n  overflow-y: auto;\n}\n\n.lyrics-content::-webkit-scrollbar {\n  width: 6px;\n}\n\n.lyrics-content::-webkit-scrollbar-track {\n  background: rgba(255, 255, 255, 0.05);\n  border-radius: 3px;\n}\n\n.lyrics-content::-webkit-scrollbar-thumb {\n  background: rgba(255, 255, 255, 0.2);\n  border-radius: 3px;\n}\n\n.lyrics-content::-webkit-scrollbar-thumb:hover {\n  background: rgba(255, 255, 255, 0.3);\n}\n\n.lyrics-search {\n  display: flex;\n  gap: 0.5rem;\n  margin-bottom: 1rem;\n}\n\n.lyrics-search input {\n  flex: 1;\n  padding: 0.75rem 1rem;\n  background-color: rgba(255, 255, 255, 0.1);\n  border: none;\n  border-radius: 8px;\n  color: var(--text-primary);\n  font-size: 0.9rem;\n}\n\n.lyrics-search input:focus {\n  outline: none;\n  background-color: rgba(255, 255, 255, 0.15);\n}\n\n.lyrics-search button {\n  padding: 0.75rem 1.5rem;\n  background: var(--primary-color);\n  color: #121212;\n  border: none;\n  border-radius: 8px;\n  cursor: pointer;\n  font-size: 0.9rem;\n  font-weight: 500;\n  transition: background-color 0.2s;\n}\n\n.lyrics-search button:hover {\n  background: var(--primary-hover);\n}\n\n.lyrics-results-list {\n  margin-top: 1rem;\n  display: flex;\n  flex-direction: column;\n  gap: 0.75rem;\n}\n\n.lyrics-results-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0.75rem;\n  background: rgba(255, 255, 255, 0.05);\n  border-radius: 8px;\n  gap: 1rem;\n  transition: background-color 0.2s;\n}\n\n.lyrics-results-item:hover {\n  background: rgba(255, 255, 255, 0.1);\n}\n\n.lyrics-results-info {\n  display: flex;\n  flex-direction: column;\n  gap: 0.25rem;\n  flex: 1;\n  overflow: hidden;\n}\n\n.song-title {\n  font-weight: 500;\n  color: var(--text-primary);\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.artist-name {\n  font-size: 0.8rem;\n  color: var(--text-secondary);\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.get-lyrics-btn {\n  padding: 0.5rem 1rem;\n  background: var(--primary-color);\n  color: #121212;\n  border: none;\n  border-radius: 8px;\n  cursor: pointer;\n  font-size: 0.8rem;\n  font-weight: 500;\n  white-space: nowrap;\n  transition: background-color 0.2s;\n}\n\n.get-lyrics-btn:hover {\n  background: var(--primary-hover);\n}\n\npre {\n  white-space: pre-wrap;\n  word-wrap: break-word;\n  color: var(--text-primary);\n  font-family: inherit;\n  line-height: 1.6;\n  font-size: 0.9rem;\n}\n\n/* YouTube Player (hidden) */\n#youtube-player {\n  position: absolute;\n  top: -9999px;\n  left: -9999px;\n}\n\n/* Responsive Design */\n@media (max-width: 900px) {\n  .player-layout {\n    flex-direction: column;\n  }\n  \n  .playlist-section {\n    width: 100%;\n    margin-top: 2rem;\n  }\n  \n  .album-art {\n    width: 250px;\n    height: 250px;\n  }\n  \n  .controls {\n    gap: 1.5rem;\n  }\n}\n\n@media (max-width: 600px) {\n  .header-content {\n    flex-direction: column;\n    gap: 1rem;\n  }\n  \n  .search-input {\n    width: 100%;\n  }\n  \n  .album-art {\n    width: 200px;\n    height: 200px;\n  }\n  \n  .controls {\n    gap: 1rem;\n  }\n  \n  .play-btn {\n    width: 50px;\n    height: 50px;\n  }\n  \n  .action-buttons {\n    flex-direction: column;\n    gap: 0.75rem;\n  }\n}","html":"<div class=\"player-container\">\n  <header class=\"header-section\">\n  <div class=\"header-content\">\n    <div class=\"logo-title\">\n      <span class=\"logo\">♫</span>\n      <h1>Harmony</h1>\n    </div>\n    <div class=\"search-input\">\n      <Search size={20} class=\"search-icon\" />\n      <input type=\"text\" placeholder=\"Search\" />\n    </div>\n    <button class=\"add-api-key-btn\" on:click={handleApiKeyModalClick}>\n      Add Your API Key\n    </button>\n  </div>\n</header>\n  <div class=\"player-layout\">\n  <div class=\"player-section\">\n    <div class=\"album-art\">\n      <img src={thumbnailUrl || \"/placeholder.svg\"} alt=\"Album Art\" />\n    </div>\n    \n    <div class=\"track-info\">\n      <div class=\"title\">{currentTrackInfo ? currentTrackInfo.title : 'Midnight Serenade'}</div>\n      <div class=\"artist-album\">\n        <span class=\"artist\">{currentTrackInfo ? currentTrackInfo.artist : 'Luna Beats'}</span>\n      </div>\n    </div>\n    \n    <div class=\"controls\">\n      <button class=\"control-btn\" aria-label=\"Previous\" on:click={playPreviousTrack}>\n        <SkipBack size={24} />\n      </button>\n      <button class=\"control-btn play-btn\" on:click={togglePlay} aria-label={isPlaying ? 'Pause' : 'Play'}>\n        {#if isPlaying}\n          <Pause size={30} />\n        {:else}\n          <Play size={30} />\n        {/if}\n      </button>\n      <button class=\"control-btn\" aria-label=\"Next\" on:click={playNextTrack}>\n        <SkipForward size={24} />\n      </button>\n    </div>\n    \n    <div class=\"time-progress\">\n  <div \n    class=\"progress-container\" \n    on:click={handleProgressBarClick}\n    on:keydown={handleProgressKeydown}\n    tabindex=\"0\"\n    role=\"slider\"\n    aria-label=\"Seek position in track\"\n    aria-valuemin=\"0\"\n    aria-valuemax=\"100\"\n    aria-valuenow={Math.round((currentTime / duration) * 100)}\n  >\n    <div class=\"progress-bar\" style=\"width: {(currentTime / duration) * 100}%\" />\n  </div>\n  <div class=\"time-display\">\n    <span>{formatTime(currentTime)}</span>\n    <span>{formatTime(duration)}</span>\n  </div>\n  <div class=\"volume-indicator\">{volume}%</div>\n</div>\n    <div class=\"volume-control\">\n  <button class=\"volume-button\" on:click={toggleMute} aria-label=\"Toggle mute\">\n    {#if volume === 0}\n      <VolumeX size={20} />\n    {:else if volume < 50}\n      <Volume1 size={20} />\n    {:else}\n      <Volume2 size={20} />\n    {/if}\n  </button>\n  <input\n    type=\"range\"\n    min=\"0\"\n    max=\"100\"\n    bind:value={volume}\n    on:input={() => setVolume(volume)}\n    class=\"volume-slider\"\n    aria-label=\"Volume control\"\n  />\n</div>\n    \n    <div class=\"action-buttons\">\n      <button class=\"action-btn search-lyrics-btn\" on:click={toggleLyrics}>\n        Search Lyrics\n      </button>\n      <button class=\"action-btn save-playlist-btn\">\n        Save Playlist\n      </button>\n    </div>\n  </div>\n  \n  <div class=\"playlist-section\">\n    <h2>Playlist</h2>\n    <div class=\"playlist-card\">\n      <ul class=\"playlist-list\">\n        {#each playlist as track, index}\n          <li class=\"playlist-item\" class:active={currentVideoId === track.videoId}>\n            <div class=\"playlist-item-info\">\n              <button class=\"playlist-item-title\" on:click={() => playVideo(track.videoId)}>\n                {track.title}\n              </button>\n              <span class=\"track-artist\">{track.artist}</span>\n            </div>\n            <button class=\"remove-from-playlist\" on:click={() => removeFromPlaylist(index)}>\n              <Trash2 size={16} />\n            </button>\n          </li>\n        {/each}\n      </ul>\n    </div>\n    <button class=\"add-to-playlist\" on:click={handleSearchYouTubeClick}>\n      <Plus size={16} />\n    </button>\n  </div>\n</div>\n\n  {#if showSearchModal}\n    <div class=\"modal\">\n      <div class=\"modal-content\">\n        <button\n          class=\"modal-close\"\n          on:click={() => (showSearchModal = false)}\n          aria-label=\"Close search modal\"\n        >\n          <X />\n        </button>\n        <h2>Search YouTube</h2>\n        <div class=\"search-input\">\n          <input\n            type=\"text\"\n            bind:value={searchQuery}\n            placeholder=\"Search for tracks...\"\n            on:keydown={(e) => e.key === 'Enter' && searchYouTube()}\n            aria-label=\"Search for tracks\"\n          />\n          <button on:click={searchYouTube}>Search</button>\n        </div>\n        {#if isSearching}\n          <p>Searching...</p>\n        {:else if searchResults.length > 0}\n          <div class=\"search-results\">\n            {#each searchResults.slice(0, displayedResults) as result}\n              <div class=\"search-result-item\">\n                <span>{result.title}</span>\n                <span class=\"artist\">{result.artist}</span>\n                <div class=\"search-result-actions\">\n                  <button\n                    class=\"action-btn\"\n                    on:click={() => playVideo(result.videoId)}\n                    aria-label={`Play ${result.title} by ${result.artist}`}\n                  >\n                    <Play size={15} />\n                  </button>\n                  <button\n                    class=\"action-btn\"\n                    on:click={() => addToPlaylist(result)}\n                    aria-label={`Add ${result.title} to playlist`}\n                  >\n                    <List size={15} />\n                  </button>\n                </div>\n              </div>\n            {/each}\n          </div>\n          {#if searchResults.length > displayedResults}\n            <button class=\"load-more\" on:click={loadMore} aria-label=\"Load more results\">\n              Load More\n            </button>\n          {/if}\n        {:else if searchResults.length === 0 && !isSearching}\n          <p>No results found</p>\n        {/if}\n      </div>\n    </div>\n  {/if}\n\n  {#if showApiKeyModal}\n    <div class=\"modal\">\n      <div class=\"modal-content\">\n        <button\n          class=\"modal-close\"\n          on:click={() => (showApiKeyModal = false)}\n          aria-label=\"Close API key modal\"\n        >\n          <X />\n        </button>\n        <h2>YouTube API Key</h2>\n        <div class=\"api-key-input\">\n          <input\n            type=\"text\"\n            bind:value={youtubeApiKey}\n            placeholder=\"Enter your API key\"\n            aria-label=\"YouTube API Key\"\n          />\n          <button on:click={setApiKey}>Save</button>\n        </div>\n      </div>\n    </div>\n  {/if}\n  <div id=\"youtube-player\"></div>\n</div>"},"fields":[],"content":{"en":{}},"site":"192117ab-0bc1-43ad-8aac-51a7c10feb5e"},{"id":"d7ac2d81-762f-4ab8-bce4-f857ce4f02a6","name":"Site Navigation","code":{"js":"import {fade} from 'svelte/transition'\n// import Icon from '@iconify/svelte'\n\nlet mobileNavOpen = false \n\nfunction toggleMobileNav() {\n  mobileNavOpen = !mobileNavOpen\n}\n","css":".section-container {\n  /* Defined in Site CSS */\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding-top: 1rem;\n  padding-bottom: 1rem;\n}\n\n.logo {\n  font-size: 1.5rem;\n  font-weight: 600;\n  line-height: 1.2;\n}\n\n.desktop-nav {\n  display: none;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n\n  nav {\n    display: flex;\n    gap: 2rem;\n\n    a.link {\n      /* Defined in Site CSS */\n      border-color: transparent;\n      transition: border-color 0.1s;\n      font-size: 0.95rem;\n\n      &:hover {\n        border-color: initial;\n      }\n    }\n  }\n\n  @media (min-width: 800px) {\n    display: flex;\n  }\n}\n\n.mobile-nav {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n  font-weight: 500;\n\n  @media (min-width: 800px) {\n    display: none;\n  }\n}\n\n/* Mobile navigation popup */\n#popup {\n  font-size: 1.25rem;\n  display: grid;\n  gap: 1rem;\n  position: absolute;\n  text-align: center;\n  background-color: var(--background-color, white);\n  box-shadow: var(--box-shadow, 0px 4px 30px rgba(0, 0, 0, 0.1));\n  border-radius: var(--border-radius);\n  inset: 0.5rem;\n  bottom: initial;\n  padding: 2rem;\n  z-index: 1;\n\n  button#close {\n    position: absolute;\n    right: 1rem;\n    top: 1rem;\n  }\n}\n","html":"<header class=\"section-container\">\n  <div class=\"desktop-nav\">\n    <a href=\"/\" class=\"logo\">\n      {#if logo.title}\n        {logo.title}\n      {:else if logo.image.url}\n        <img src={logo.image.url} alt={logo.image.alt} />\n      {/if}\n    </a>\n    <nav>\n      {#each site_nav as { link }}\n        <a class=\"link\" href={link.url}>{link.label}</a>\n      {/each}\n    </nav>\n  </div>\n  <div class=\"mobile-nav\">\n    <a href=\"/\" class=\"logo\">\n      {#if logo.title}\n        {logo.title}\n      {:else if logo.image.url}\n        <img src={logo.image.url} alt={logo.image.alt} />\n      {/if}\n    </a>\n    <button\n      id=\"open\"\n      on:click={() => (mobileNavOpen = true)}\n      aria-label=\"Open mobile navigation\">\n      <!-- <Icon height=\"30\" icon=\"eva:menu-outline\" /> -->\n    </button>\n    {#if mobileNavOpen}\n      <nav id=\"popup\" transition:fade={{ duration: 200 }}>\n        {#each site_nav as { link }}\n          <a href={link.url}>{link.label}</a>\n        {/each}\n        <button\n          on:click={() => (mobileNavOpen = false)}\n          id=\"close\"\n          aria-label=\"Close Navigation\">\n          <!-- <Icon height=\"25\" icon=\"bi:x-lg\" /> -->\n        </button>\n      </nav>\n    {/if}\n  </div>\n</header>"},"fields":[{"id":"bjnyu","key":"logo","type":"group","label":"Logo","value":{"image":{"alt":"","src":"https://jbbjtodsvhsgjappwopg.supabase.co/storage/v1/object/public/sites/public-library/assets/logoipsum-261 (1).svg","url":"https://jbbjtodsvhsgjappwopg.supabase.co/storage/v1/object/public/sites/public-library/assets/logoipsum-261 (1).svg","size":3},"title":"Logo"},"fields":[{"id":"hehwn","key":"title","type":"text","label":"Title","fields":[],"options":{},"is_static":false},{"id":"ueztm","key":"image","type":"image","label":"Image","fields":[],"options":{},"is_static":false}],"options":{},"is_static":true},{"id":"qazio","key":"site_nav","type":"repeater","label":"Site Navigation","value":[{"link":{"url":"","label":"Home","active":false}},{"link":{"url":"/","label":"About"}},{"link":{"url":"/","label":"Contact"}}],"fields":[{"id":"onbxk","key":"link","type":"link","label":"Link","fields":[],"options":{},"is_static":false}],"options":{},"is_static":true}],"content":{"en":{"logo":{"image":{"alt":"","src":"https://jbbjtodsvhsgjappwopg.supabase.co/storage/v1/object/public/sites/public-library/assets/logoipsum-261 (1).svg","url":"https://jbbjtodsvhsgjappwopg.supabase.co/storage/v1/object/public/sites/public-library/assets/logoipsum-261 (1).svg","size":3},"title":"Logo"},"site_nav":[{"link":{"url":"","label":"Home","active":false}},{"link":{"url":"/","label":"About"}},{"link":{"url":"/","label":"Contact"}}]}},"site":"192117ab-0bc1-43ad-8aac-51a7c10feb5e"},{"id":"bd8c3031-5c66-4ba3-a2cc-3f543afc00e4","name":"Content","code":{"js":"","css":".content {\n  :global(img) {\n    width: 100%;\n    margin: 2rem 0;\n    box-shadow: var(--box-shadow);\n    border-radius: var(--border-radius);\n  }\n\n  :global(p) {\n    padding: 0.5rem 0;\n    line-height: 1.5;\n  }\n\n  :global(a) {\n    text-decoration: underline;\n  }\n\n  :global(h1) {\n    font-size: 2.5rem;\n    font-weight: 600;\n    line-height: 1.2;\n    margin-bottom: 0.5rem;\n  }\n\n  :global(h2) {\n    font-size: 2rem;\n    font-weight: 600;\n    margin-bottom: 0.25rem;\n    line-height: 1.2;\n  }\n\n  :global(h3) {\n    font-size: 1.5rem;\n    font-weight: 600;\n    line-height: 1.2;\n    margin-top: .5rem;\n  }\n\n  :global(ul) {\n    list-style: disc;\n    padding: 0.5rem 0;\n    padding-left: 1.25rem;\n  }\n\n  :global(ol) {\n    list-style: decimal;\n    padding: 0.5rem 0;\n    padding-left: 1.25rem;\n  }\n\n  :global(blockquote) {\n    padding: 2rem;\n    box-shadow: var(--box-shadow);\n    border-radius: var(--border-radius);\n  }\n}\n","html":"<div class=\"section\">\n  <div class=\"section-container content\">{@html content.html}</div>\n</div>\n"},"fields":[{"id":"wqxfg","key":"content","type":"markdown","label":"Content","fields":[],"options":{},"is_static":false}],"content":{"en":{"content":{"html":"<h1>Heading 1</h1><p>Welcome, feel free to delete these blocks and create your own by clicking the \"+\" button in the side panel. Click the code button in the corner of this block to change its styling.</p><h2>Heading 2</h2><p>A simple paragraph. You can use markdown in this block. <strong>Duis aute</strong> irure dolor in reprehenderit in voluptate velit esse cillum dolore <em>eu fugiat</em> nulla pariatur. Excepteur sint <strong>occaecat cupidatat</strong> non proident, sunt in culpa qui officia <a target=\"_blank\" rel=\"noopener noreferrer nofollow\" class=\"link link link link link\" href=\"/\">deserunt mollit</a> anim id est laborum.</p><h3>Heading 3</h3><p>Enjoy :)</p>","markdown":"# Heading 1\n\nWelcome, feel free to delete these blocks and create your own by clicking the \"+\" button in the side panel. Click the code button in the corner of this block to change its styling.\n\n## Heading 2\n\nA simple paragraph. You can use markdown in this block. **Duis aute** irure dolor in reprehenderit in voluptate velit esse cillum dolore *eu fugiat* nulla pariatur. Excepteur sint **occaecat cupidatat** non proident, sunt in culpa qui officia [deserunt mollit](</>) anim id est laborum.\n\n### Heading 3\n\n"}}},"site":"192117ab-0bc1-43ad-8aac-51a7c10feb5e"},{"id":"13b02cc7-035c-4e7c-abd6-912e2d4d9f04","name":"Site Footer","code":{"js":"// import Icon from '@iconify/svelte';","css":".section-container { /* Defined in Site CSS */\n  display: flex;\n  justify-content: space-between;\n  flex-direction: column;\n  align-items: center;\n  gap: 1rem;\n  padding-top: 1rem;\n  padding-bottom: 1rem;\n  \n  @media (min-width: 600px) {\n    flex-direction: row;\n  }\n}\n\nnav {\n  display: flex;\n  gap: 1rem;\n  font-size:.875rem;\n\n  .link { /* Defined in Site CSS */\n    border-color: transparent;\n\n    &:hover {\n      border-color: initial;\n    }\n  }\n}\n\n.primo {\n  font-weight: 600;\n  font-size: 0.75rem;\n  \n  a {\n    text-decoration: underline; \n  }\n}\n\n.social-links {\n  display: flex;\n  gap: 1.5rem;\n  font-size: 1.5rem;\n\n  a {\n    color: var(--color-accent, rebeccapurple);\n    transition: var(--transition, 0.1s transform);\n\n    &:hover {\n      transform: scale(1.1);\n    }\n  }\n}\n","html":"<footer class=\"section-container\">\n  <nav>\n    {#each nav as { link }}\n      <a class=\"link\" href={link.url}>{link.label}</a>\n    {/each}\n  </nav>\n  <span class=\"primo\"> <a href=\"https://primo.so\">Primo</a> Powered </span>\n  <div class=\"social-links\">\n    {#each social as { link, icon }}\n      <a href={link.url} aria-label={link.label}>\n        <!-- <Icon {icon} /> -->\n      </a>\n    {/each}\n  </div>\n</footer>"},"fields":[{"id":"pwkca","key":"nav","type":"repeater","label":"Site Navigation","value":[{"link":{"url":"https://primosites.vercel.app/theme-minimal","label":"Copyright 2023"}}],"fields":[{"id":"fayrx","key":"link","type":"link","label":"Link","fields":[],"options":{},"is_static":false}],"options":{},"is_static":true},{"id":"agfry","key":"social","type":"repeater","label":"Social Items","value":[{"icon":"mdi:twitter","link":{"url":"/","label":"Twitter"}},{"icon":"mdi:linkedin","link":{"url":"/","label":"Linkedin"}}],"fields":[{"id":"nxhuf","key":"link","type":"link","label":"Link","fields":[],"options":{},"is_static":false},{"id":"xcsnn","key":"icon","type":"text","label":"Icon","fields":[],"options":{},"is_static":false}],"options":{},"is_static":true}],"content":{"en":{"nav":[{"link":{"url":"https://primosites.vercel.app/theme-minimal","label":"Copyright 2023"}}],"social":[{"icon":"mdi:twitter","link":{"url":"/","label":"Twitter"}},{"icon":"mdi:linkedin","link":{"url":"/","label":"Linkedin"}}]}},"site":"192117ab-0bc1-43ad-8aac-51a7c10feb5e"}],"version":2}